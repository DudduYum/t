{"map":"{\"version\":3,\"sources\":[\"webpack/bootstrap\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/src/serialize/BaseTypes.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/src/serialize/TwoVector.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/src/serialize/Serializable.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/node_modules/es5-ext/object/is-value.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/src/GameWorld.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/src/lib/Trace.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/src/GameEngine.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/node_modules/event-emitter/index.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/src/game/Timer.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/src/lib/Utils.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/webpack/buildin/global.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/node_modules/d/index.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/node_modules/es5-ext/object/assign/index.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/node_modules/es5-ext/object/assign/is-implemented.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/node_modules/es5-ext/object/assign/shim.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/node_modules/es5-ext/object/keys/index.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/node_modules/es5-ext/object/keys/is-implemented.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/node_modules/es5-ext/object/keys/shim.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/node_modules/es5-ext/function/noop.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/node_modules/es5-ext/object/valid-value.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/node_modules/es5-ext/object/normalize-options.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/node_modules/es5-ext/object/is-callable.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/node_modules/es5-ext/string/#/contains/index.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/node_modules/es5-ext/string/#/contains/is-implemented.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/node_modules/es5-ext/string/#/contains/shim.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/node_modules/es5-ext/object/valid-callable.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/src/serialize/GameObject.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/src/lib/MathUtils.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/node_modules/lance-gg/src/serialize/DynamicObject.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/src/js/common/ObservableObject.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/src/entries/service1.js\",\"/Users/rostyslavkostyuk/Documents/developing/node/uni/lavoro_di_tesi/src/js/common/ConfiguratorLogicEngine.js\"],\"names\":[\"installedModules\",\"__webpack_require__\",\"moduleId\",\"exports\",\"module\",\"i\",\"l\",\"modules\",\"call\",\"m\",\"c\",\"d\",\"name\",\"getter\",\"o\",\"Object\",\"defineProperty\",\"enumerable\",\"get\",\"r\",\"Symbol\",\"toStringTag\",\"value\",\"t\",\"mode\",\"__esModule\",\"ns\",\"create\",\"key\",\"bind\",\"n\",\"object\",\"property\",\"prototype\",\"hasOwnProperty\",\"p\",\"s\",\"BaseTypes\",\"TYPES\",\"FLOAT32\",\"INT32\",\"INT16\",\"INT8\",\"UINT8\",\"STRING\",\"CLASSINSTANCE\",\"LIST\",\"__webpack_exports__\",\"_Serializable__WEBPACK_IMPORTED_MODULE_0__\",\"_BaseTypes__WEBPACK_IMPORTED_MODULE_1__\",\"TwoVector\",\"netScheme\",\"x\",\"type\",\"y\",\"[object Object]\",\"super\",\"this\",\"round3\",\"Math\",\"round\",\"other\",\"sqrt\",\"multiplyScalar\",\"length\",\"sourceObj\",\"target\",\"options\",\"increment\",\"clone\",\"subtract\",\"percent\",\"max\",\"min\",\"increments\",\"_lib_Utils__WEBPACK_IMPORTED_MODULE_0__\",\"serializer\",\"dataBuffer\",\"dataView\",\"classId\",\"bufferOffset\",\"assign\",\"localBufferOffset\",\"hashStr\",\"constructor\",\"console\",\"warn\",\"dry\",\"bufferSize\",\"serialize\",\"ArrayBuffer\",\"DataView\",\"setUint8\",\"Uint8Array\",\"BYTES_PER_ELEMENT\",\"keys\",\"sort\",\"writeDataView\",\"Uint16Array\",\"undefined\",\"item\",\"itemType\",\"getTypeByteSize\",\"prevObject\",\"deserialize\",\"obj\",\"changedStrings\",\"filter\",\"prunedCopy\",\"id\",\"indexOf\",\"_undefined\",\"val\",\"stepCount\",\"objects\",\"playerCount\",\"idCount\",\"possibleId\",\"query\",\"queriedObjects\",\"forEachObject\",\"conditions\",\"push\",\"playerId\",\"instanceType\",\"components\",\"forEach\",\"componentClass\",\"hasComponent\",\"every\",\"returnSingle\",\"queryObjects\",\"callback\",\"Trace\",\"traceLevel\",\"TRACE_DEBUG\",\"traceBuffer\",\"step\",\"error\",\"trace\",\"TRACE_ERROR\",\"TRACE_WARN\",\"info\",\"TRACE_INFO\",\"debug\",\"TRACE_ALL\",\"TRACE_NONE\",\"level\",\"dataCB\",\"Error\",\"data\",\"time\",\"Date\",\"buffer\",\"global\",\"_GameWorld__WEBPACK_IMPORTED_MODULE_0__\",\"event_emitter__WEBPACK_IMPORTED_MODULE_1__\",\"event_emitter__WEBPACK_IMPORTED_MODULE_1___default\",\"_game_Timer__WEBPACK_IMPORTED_MODULE_2__\",\"_lib_Trace__WEBPACK_IMPORTED_MODULE_3__\",\"isServerSide\",\"window\",\"LANCE\",\"gameEngine\",\"defaultOpts\",\"GameWorld\",\"clientIDSpace\",\"NaN\",\"eventEmitter\",\"a\",\"on\",\"once\",\"removeListener\",\"off\",\"emit\",\"serverObj\",\"localId\",\"world\",\"Number\",\"localObj\",\"inputId\",\"worldSettings\",\"initWorld\",\"timer\",\"play\",\"isReenact\",\"tick\",\"timestamp\",\"getTime\",\"dt\",\"physicsOnly\",\"physicsEngine\",\"objectFilter\",\"Boolean\",\"ignorePhysics\",\"refreshFromPhysics\",\"toString\",\"serverCopyArrived\",\"addObject\",\"onAddToWorld\",\"inputDesc\",\"isServer\",\"messageIndex\",\"input\",\"objectId\",\"onRemoveFromWorld\",\"removeObject\",\"methods\",\"descriptors\",\"base\",\"callable\",\"apply\",\"Function\",\"defineProperties\",\"descriptor\",\"configurable\",\"writable\",\"listener\",\"self\",\"arguments\",\"__eeOnceListener__\",\"__ee__\",\"listeners\",\"candidate\",\"splice\",\"args\",\"Array\",\"slice\",\"Timer\",\"currentTime\",\"isActive\",\"idCounter\",\"events\",\"event\",\"eventId\",\"startOffset\",\"thisContext\",\"destroy\",\"timerEvent\",\"TimerEvent\",\"repeat\",\"single\",\"Utils\",\"str\",\"bits\",\"hash\",\"charCodeAt\",\"pow\",\"buf1\",\"buf2\",\"byteLength\",\"dv1\",\"Int8Array\",\"dv2\",\"url\",\"Promise\",\"resolve\",\"reject\",\"req\",\"XMLHttpRequest\",\"open\",\"onload\",\"status\",\"JSON\",\"parse\",\"responseText\",\"onerror\",\"send\",\"g\",\"e\",\"normalizeOpts\",\"isCallable\",\"contains\",\"dscr\",\"w\",\"desc\",\"gs\",\"set\",\"foo\",\"bar\",\"trzy\",\"dest\",\"src\",\"isValue\",\"TypeError\",\"opts1\",\"result\",\"process\",\"String\",\"searchString\",\"fn\",\"serialize_GameObject\",\"Serializable\",\"getNewId\",\"savedCopy\",\"syncTo\",\"bending\",\"position\",\"velocity\",\"angularVelocity\",\"angleLocal\",\"isLocal\",\"bendingIncrements\",\"bendToCurrent\",\"original\",\"componentInstance\",\"parentObject\",\"componentName\",\"MathUtils\",\"start\",\"end\",\"wrapMin\",\"wrapMax\",\"wrapTest\",\"abs\",\"log\",\"interpolatedVal\",\"interpolateDeltaWithWrapping\",\"wrapLength\",\"serialize_DynamicObject\",\"width\",\"height\",\"isStatic\",\"angle\",\"props\",\"friction\",\"copy\",\"isRotatingLeft\",\"isRotatingRight\",\"isAccelerating\",\"rotationSpeed\",\"acceleration\",\"deceleration\",\"deltaAngle\",\"turnRight\",\"rad\",\"PI\",\"dv\",\"cos\",\"sin\",\"add\",\"bendingPositionDelta\",\"bendingVelocityDelta\",\"bendingAngleDelta\",\"maxSpeed\",\"bendingAngle\",\"positionBending\",\"velocityBending\",\"angleBending\",\"positionLocal\",\"velocityLocal\",\"incrementScale\",\"getBendingDelta\",\"bendingTarget\",\"bendingOptions\",\"stepDesc\",\"timeFactor\",\"posDelta\",\"velDelta\",\"ObservableObject_ObservableObject\",\"GameEngine\",\"opt\",\"configurationLogic\",\"serverInit\",\"registerClass\"],\"mappings\":\"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\",\"sourcesContent\":[\" \\t// The module cache\\n \\tvar installedModules = {};\\n\\n \\t// The require function\\n \\tfunction __webpack_require__(moduleId) {\\n\\n \\t\\t// Check if module is in cache\\n \\t\\tif(installedModules[moduleId]) {\\n \\t\\t\\treturn installedModules[moduleId].exports;\\n \\t\\t}\\n \\t\\t// Create a new module (and put it into the cache)\\n \\t\\tvar module = installedModules[moduleId] = {\\n \\t\\t\\ti: moduleId,\\n \\t\\t\\tl: false,\\n \\t\\t\\texports: {}\\n \\t\\t};\\n\\n \\t\\t// Execute the module function\\n \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n\\n \\t\\t// Flag the module as loaded\\n \\t\\tmodule.l = true;\\n\\n \\t\\t// Return the exports of the module\\n \\t\\treturn module.exports;\\n \\t}\\n\\n\\n \\t// expose the modules object (__webpack_modules__)\\n \\t__webpack_require__.m = modules;\\n\\n \\t// expose the module cache\\n \\t__webpack_require__.c = installedModules;\\n\\n \\t// define getter function for harmony exports\\n \\t__webpack_require__.d = function(exports, name, getter) {\\n \\t\\tif(!__webpack_require__.o(exports, name)) {\\n \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n \\t\\t}\\n \\t};\\n\\n \\t// define __esModule on exports\\n \\t__webpack_require__.r = function(exports) {\\n \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n \\t\\t}\\n \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n \\t};\\n\\n \\t// create a fake namespace object\\n \\t// mode & 1: value is a module id, require it\\n \\t// mode & 2: merge all properties of value into the ns\\n \\t// mode & 4: return value when already ns object\\n \\t// mode & 8|1: behave like require\\n \\t__webpack_require__.t = function(value, mode) {\\n \\t\\tif(mode & 1) value = __webpack_require__(value);\\n \\t\\tif(mode & 8) return value;\\n \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n \\t\\tvar ns = Object.create(null);\\n \\t\\t__webpack_require__.r(ns);\\n \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n \\t\\treturn ns;\\n \\t};\\n\\n \\t// getDefaultExport function for compatibility with non-harmony modules\\n \\t__webpack_require__.n = function(module) {\\n \\t\\tvar getter = module && module.__esModule ?\\n \\t\\t\\tfunction getDefault() { return module['default']; } :\\n \\t\\t\\tfunction getModuleExports() { return module; };\\n \\t\\t__webpack_require__.d(getter, 'a', getter);\\n \\t\\treturn getter;\\n \\t};\\n\\n \\t// Object.prototype.hasOwnProperty.call\\n \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n\\n \\t// __webpack_public_path__\\n \\t__webpack_require__.p = \\\"\\\";\\n\\n\\n \\t// Load entry module and return exports\\n \\treturn __webpack_require__(__webpack_require__.s = 26);\\n\",\"\\n/**\\n * The BaseTypes class defines the base types used in lance.\\n * These are the types which can be used to define an object's netscheme attributes,\\n * which can be serialized by lance.\\n * @example\\n *     static get netScheme() {\\n *       return {\\n *             strength: { type: BaseTypes.TYPES.FLOAT32 },\\n *             shield: { type: BaseTypes.TYPES.INT8 },\\n *             name: { type: BaseTypes.TYPES.STRING },\\n *             backpack: { type: BaseTypes.TYPES.CLASSINSTANCE },\\n *             coins: {\\n *                 type: BaseTypes.TYPES.LIST,\\n *                 itemType: BaseTypes.TYPES.UINT8\\n *             }\\n *         };\\n *     }\\n */\\nclass BaseTypes {}\\n\\n/**\\n * @type {object}\\n * @property {string} FLOAT32 Seriablizable float\\n * @property {string} INT32 Seriablizable 32-bit integer\\n * @property {string} INT16 Seriablizable 16-bit integer\\n * @property {string} INT8 Seriablizable 8-bit integer\\n * @property {string} UINT8 Seriablizable unsigned 8-bit integer\\n * @property {string} STRING Seriablizable string\\n * @property {string} CLASSINSTANCE Seriablizable class. Make sure you register all the classes included in this way.\\n * @property {string} LIST Seriablizable list.  In the netScheme definition, if an attribute is defined as a list, the itemType should also be defined.\\n */\\nBaseTypes.TYPES = {\\n\\n  /**\\n   * Seriablizable float\\n   * @alias TYPES.FLOAT32\\n   * @memberof! BaseTypes#\\n   */\\n    FLOAT32: 'FLOAT32',\\n\\n    /**\\n     * Seriablizable 32-bit int\\n     * @alias TYPES.INT32\\n     * @memberof! BaseTypes#\\n     */\\n    INT32: 'INT32',\\n\\n    /**\\n     * Seriablizable 16-bit int\\n     * @alias TYPES.INT16\\n     * @memberof! BaseTypes#\\n     */\\n    INT16: 'INT16',\\n\\n    /**\\n     * Seriablizable 8-bit int\\n     * @alias TYPES.INT8\\n     * @memberof! BaseTypes#\\n     */\\n    INT8: 'INT8',\\n\\n    /**\\n     * Seriablizable unsigned 8-bit int\\n     * @alias TYPES.UINT8\\n     * @memberof! BaseTypes#\\n     */\\n    UINT8: 'UINT8',\\n\\n    /**\\n     * Seriablizable string\\n     * @alias TYPES.STRING\\n     * @memberof! BaseTypes#\\n     */\\n    STRING: 'STRING',\\n\\n    /**\\n     * Seriablizable class.  Make sure you registered the classes included in this way.\\n     * @alias TYPES.CLASSINSTANCE\\n     * @memberof! BaseTypes#\\n     */\\n    CLASSINSTANCE: 'CLASSINSTANCE',\\n\\n    /**\\n     * Seriablizable list.\\n     * @alias TYPES.LIST\\n     * @memberof! BaseTypes#\\n     */\\n    LIST: 'LIST'\\n};\\n\\nexport default BaseTypes;\\n\",\"import Serializable from './Serializable';\\nimport BaseTypes from './BaseTypes';\\n\\n/**\\n * A TwoVector is a geometric object which is completely described\\n * by two values.\\n */\\nclass TwoVector extends Serializable {\\n\\n    static get netScheme() {\\n        return {\\n            x: { type: BaseTypes.TYPES.FLOAT32 },\\n            y: { type: BaseTypes.TYPES.FLOAT32 }\\n        };\\n    }\\n\\n    /**\\n    * Creates an instance of a TwoVector.\\n    * @param {Number} x - first value\\n    * @param {Number} y - second value\\n    * @return {TwoVector} v - the new TwoVector\\n    */\\n    constructor(x, y) {\\n        super();\\n        this.x = x;\\n        this.y = y;\\n\\n        return this;\\n    }\\n\\n    /**\\n     * Formatted textual description of the TwoVector.\\n     * @return {String} description\\n     */\\n    toString() {\\n        function round3(x) { return Math.round(x * 1000) / 1000; }\\n        return `[${round3(this.x)}, ${round3(this.y)}]`;\\n    }\\n\\n    /**\\n     * Set TwoVector values\\n     *\\n     * @param {Number} x x-value\\n     * @param {Number} y y-value\\n     * @return {TwoVector} returns self\\n     */\\n    set(x, y) {\\n        this.x = x;\\n        this.y = y;\\n        return this;\\n    }\\n\\n    multiply(other) {\\n        this.x *= other.x;\\n        this.y *= other.y;\\n\\n        return this;\\n    }\\n\\n    /**\\n     * Multiply this TwoVector by a scalar\\n     *\\n     * @param {Number} s the scale\\n     * @return {TwoVector} returns self\\n     */\\n    multiplyScalar(s) {\\n        this.x *= s;\\n        this.y *= s;\\n\\n        return this;\\n    }\\n\\n    /**\\n     * Add other vector to this vector\\n     *\\n     * @param {TwoVector} other the other vector\\n     * @return {TwoVector} returns self\\n     */\\n    add(other) {\\n        this.x += other.x;\\n        this.y += other.y;\\n\\n        return this;\\n    }\\n\\n    /**\\n     * Subtract other vector to this vector\\n     *\\n     * @param {TwoVector} other the other vector\\n     * @return {TwoVector} returns self\\n     */\\n    subtract(other) {\\n        this.x -= other.x;\\n        this.y -= other.y;\\n\\n        return this;\\n    }\\n\\n    /**\\n     * Get vector length\\n     *\\n     * @return {Number} length of this vector\\n     */\\n    length() {\\n        return Math.sqrt(this.x * this.x + this.y * this.y);\\n    }\\n\\n    /**\\n     * Normalize this vector, in-place\\n     *\\n     * @return {TwoVector} returns self\\n     */\\n    normalize() {\\n        this.multiplyScalar(1 / this.length());\\n        return this;\\n    }\\n\\n    /**\\n     * Copy values from another TwoVector into this TwoVector\\n     *\\n     * @param {TwoVector} sourceObj the other vector\\n     * @return {TwoVector} returns self\\n     */\\n    copy(sourceObj) {\\n        this.x = sourceObj.x;\\n        this.y = sourceObj.y;\\n\\n        return this;\\n    }\\n\\n    /**\\n     * Create a clone of this vector\\n     *\\n     * @return {TwoVector} returns clone\\n     */\\n    clone() {\\n        return new TwoVector(this.x, this.y);\\n    }\\n\\n    /**\\n     * Apply in-place lerp (linear interpolation) to this TwoVector\\n     * towards another TwoVector\\n     * @param {TwoVector} target the target vector\\n     * @param {Number} p The percentage to interpolate\\n     * @return {TwoVector} returns self\\n     */\\n    lerp(target, p) {\\n        this.x += (target.x - this.x) * p;\\n        this.y += (target.y - this.y) * p;\\n\\n        return this;\\n    }\\n\\n    /**\\n     * Get bending Delta Vector\\n     * towards another TwoVector\\n     * @param {TwoVector} target the target vector\\n     * @param {Object} options bending options\\n     * @param {Number} options.increments number of increments\\n     * @param {Number} options.percent The percentage to bend\\n     * @param {Number} options.min No less than this value\\n     * @param {Number} options.max No more than this value\\n     * @return {TwoVector} returns new Incremental Vector\\n     */\\n    getBendingDelta(target, options) {\\n        let increment = target.clone();\\n        increment.subtract(this);\\n        increment.multiplyScalar(options.percent);\\n\\n        // check for max case\\n        if (((typeof options.max === 'number') && increment.length() > options.max) ||\\n            ((typeof options.min === 'number') && increment.length() < options.min)) {\\n            return new TwoVector(0, 0);\\n        }\\n\\n        // divide into increments\\n        increment.multiplyScalar(1 / options.increments);\\n\\n        return increment;\\n    }\\n}\\n\\nexport default TwoVector;\\n\",\"import Utils from './../lib/Utils';\\nimport BaseTypes from './BaseTypes';\\n\\nclass Serializable {\\n    /**\\n     *  Class can be serialized using either:\\n     * - a class based netScheme\\n     * - an instance based netScheme\\n     * - completely dynamically (not implemented yet)\\n     *\\n     * @param {Object} serializer - Serializer instance\\n     * @param {Object} [options] - Options object\\n     * @param {Object} options.dataBuffer [optional] - Data buffer to write to. If null a new data buffer will be created\\n     * @param {Number} options.bufferOffset [optional] - The buffer data offset to start writing at. Default: 0\\n     * @param {String} options.dry [optional] - Does not actually write to the buffer (useful to gather serializeable size)\\n     * @return {Object} the serialized object.  Contains attributes: dataBuffer - buffer which contains the serialized data;  bufferOffset - offset where the serialized data starts.\\n     */\\n    serialize(serializer, options) {\\n        options = Object.assign({\\n            bufferOffset: 0\\n        }, options);\\n\\n        let netScheme;\\n        let dataBuffer;\\n        let dataView;\\n        let classId = 0;\\n        let bufferOffset = options.bufferOffset;\\n        let localBufferOffset = 0; // used for counting the bufferOffset\\n\\n        // instance classId\\n        if (this.classId) {\\n            classId = this.classId;\\n        } else {\\n            classId = Utils.hashStr(this.constructor.name);\\n        }\\n\\n        // instance netScheme\\n        if (this.netScheme) {\\n            netScheme = this.netScheme;\\n        } else if (this.constructor.netScheme) {\\n            netScheme = this.constructor.netScheme;\\n        } else {\\n            // todo define behaviour when a netScheme is undefined\\n            console.warn('no netScheme defined! This will result in awful performance');\\n        }\\n\\n        // TODO: currently we serialize every node twice, once to calculate the size\\n        //       of the buffers and once to write them out.  This can be reduced to\\n        //       a single pass by starting with a large (and static) ArrayBuffer and\\n        //       recursively building it up.\\n        // buffer has one Uint8Array for class id, then payload\\n        if (options.dataBuffer == null && options.dry != true) {\\n            let bufferSize = this.serialize(serializer, { dry: true }).bufferOffset;\\n            dataBuffer = new ArrayBuffer(bufferSize);\\n        } else {\\n            dataBuffer = options.dataBuffer;\\n        }\\n\\n        if (options.dry != true) {\\n            dataView = new DataView(dataBuffer);\\n            // first set the id of the class, so that the deserializer can fetch information about it\\n            dataView.setUint8(bufferOffset + localBufferOffset, classId);\\n        }\\n\\n        // advance the offset counter\\n        localBufferOffset += Uint8Array.BYTES_PER_ELEMENT;\\n\\n        if (netScheme) {\\n            for (let property of Object.keys(netScheme).sort()) {\\n\\n                // write the property to buffer\\n                if (options.dry != true) {\\n                    serializer.writeDataView(dataView, this[property], bufferOffset + localBufferOffset, netScheme[property]);\\n                }\\n\\n                if (netScheme[property].type === BaseTypes.TYPES.STRING) {\\n                    // derive the size of the string\\n                    localBufferOffset += Uint16Array.BYTES_PER_ELEMENT;\\n                    if (this[property] !== null && this[property] !== undefined)\\n                        localBufferOffset += this[property].length * Uint16Array.BYTES_PER_ELEMENT;\\n                } else if (netScheme[property].type === BaseTypes.TYPES.CLASSINSTANCE) {\\n                    // derive the size of the included class\\n                    let objectInstanceBufferOffset = this[property].serialize(serializer, { dry: true }).bufferOffset;\\n                    localBufferOffset += objectInstanceBufferOffset;\\n                } else if (netScheme[property].type === BaseTypes.TYPES.LIST) {\\n                    // derive the size of the list\\n                    // list starts with number of elements\\n                    localBufferOffset += Uint16Array.BYTES_PER_ELEMENT;\\n\\n                    for (let item of this[property]) {\\n                        // todo inelegant, currently doesn't support list of lists\\n                        if (netScheme[property].itemType === BaseTypes.TYPES.CLASSINSTANCE) {\\n                            let listBufferOffset = item.serialize(serializer, { dry: true }).bufferOffset;\\n                            localBufferOffset += listBufferOffset;\\n                        } else if (netScheme[property].itemType === BaseTypes.TYPES.STRING) {\\n                            // size includes string length plus double-byte characters\\n                            localBufferOffset += Uint16Array.BYTES_PER_ELEMENT * (1 + item.length);\\n                        } else {\\n                            localBufferOffset += serializer.getTypeByteSize(netScheme[property].itemType);\\n                        }\\n                    }\\n                } else {\\n                    // advance offset\\n                    localBufferOffset += serializer.getTypeByteSize(netScheme[property].type);\\n                }\\n\\n            }\\n        } else {\\n            // TODO no netScheme, dynamic class\\n        }\\n\\n        return { dataBuffer, bufferOffset: localBufferOffset };\\n    }\\n\\n    // build a clone of this object with pruned strings (if necessary)\\n    prunedStringsClone(serializer, prevObject) {\\n\\n        if (!prevObject) return this;\\n        prevObject = serializer.deserialize(prevObject).obj;\\n\\n        // get list of string properties which changed\\n        let netScheme = this.constructor.netScheme;\\n        let isString = p => netScheme[p].type === BaseTypes.TYPES.STRING;\\n        let hasChanged = p => prevObject[p] !== this[p];\\n        let changedStrings = Object.keys(netScheme).filter(isString).filter(hasChanged);\\n        if (changedStrings.length == 0) return this;\\n\\n        // build a clone with pruned strings\\n        let prunedCopy = new this.constructor(null, { id: null });\\n        for (let p of Object.keys(netScheme))\\n            prunedCopy[p] = changedStrings.indexOf(p) < 0 ? this[p] : null;\\n\\n        return prunedCopy;\\n    }\\n\\n    syncTo(other) {\\n        let netScheme = this.constructor.netScheme;\\n        for (let p of Object.keys(netScheme)) {\\n\\n            // ignore classes and lists\\n            if (netScheme[p].type === BaseTypes.TYPES.LIST || netScheme[p].type === BaseTypes.TYPES.CLASSINSTANCE)\\n                continue;\\n\\n            // strings might be pruned\\n            if (netScheme[p].type === BaseTypes.TYPES.STRING) {\\n                if (typeof other[p] === 'string') this[p] = other[p];\\n                continue;\\n            }\\n\\n            // all other values are copied\\n            this[p] = other[p];\\n        }\\n    }\\n\\n}\\n\\nexport default Serializable;\\n\",\"\\\"use strict\\\";\\n\\nvar _undefined = require(\\\"../function/noop\\\")(); // Support ES3 engines\\n\\nmodule.exports = function (val) {\\n return (val !== _undefined) && (val !== null);\\n};\\n\",\"/**\\n * This class represents an instance of the game world,\\n * where all data pertaining to the current state of the\\n * world is saved.\\n */\\nclass GameWorld {\\n\\n    /**\\n     * Constructor of the World instance\\n     */\\n    constructor() {\\n        this.stepCount = 0;\\n        this.objects = {};\\n        this.playerCount = 0;\\n        this.idCount = 0;\\n    }\\n\\n    /**\\n     * Gets a new, fresh and unused id that can be used for a new object\\n     * @return {Number} the new id\\n     */\\n    getNewId() {\\n        let possibleId = this.idCount;\\n        // find a free id\\n        while (possibleId in this.objects)\\n            possibleId++;\\n\\n        this.idCount = possibleId + 1;\\n        return possibleId;\\n    }\\n\\n    /**\\n     * Returns all the game world objects which match a criteria\\n     * @param {Object} query The query object\\n     * @param {Object} [query.id] object id\\n     * @param {Object} [query.playerId] player id\\n     * @param {Class} [query.instanceType] matches whether `object instanceof instanceType`\\n     * @param {Array} [query.components] An array of component names\\n     * @param {Boolean} [query.returnSingle] Return the first object matched\\n     * @returns {Array | Object} All game objects which match all the query parameters, or the first match if returnSingle was specified\\n     */\\n    queryObjects(query) {\\n        let queriedObjects = [];\\n\\n        // todo this is currently a somewhat inefficient implementation for API testing purposes.\\n        // It should be implemented with cached dictionaries like in nano-ecs\\n        this.forEachObject((id, object) => {\\n            let conditions = [];\\n\\n            // object id condition\\n            conditions.push(!('id' in query) || query.id !== null && object.id === query.id);\\n\\n            // player id condition\\n            conditions.push(!('playerId' in query) || query.playerId !== null && object.playerId === query.playerId);\\n\\n            // instance type conditio\\n            conditions.push(!('instanceType' in query) || query.instanceType !== null && object instanceof query.instanceType);\\n\\n            // components conditions\\n            if ('components' in query) {\\n                query.components.forEach(componentClass => {\\n                    conditions.push(object.hasComponent(componentClass));\\n                });\\n            }\\n\\n            // all conditions are true, object is qualified for the query\\n            if (conditions.every(value => value)) {\\n                queriedObjects.push(object);\\n                if (query.returnSingle) return false;\\n            }\\n        });\\n\\n        // return a single object or null\\n        if (query.returnSingle) {\\n            return queriedObjects.length > 0 ? queriedObjects[0] : null;\\n        }\\n\\n        return queriedObjects;\\n    }\\n\\n    /**\\n     * Returns The first game object encountered which matches a criteria.\\n     * Syntactic sugar for {@link queryObject} with `returnSingle: true`\\n     * @param query See queryObjects\\n     * @returns {Object}\\n     */\\n    queryObject(query) {\\n        return this.queryObjects(Object.assign(query, {\\n            returnSingle: true\\n        }));\\n    }\\n\\n    /**\\n     * Add an object to the game world\\n     * @param {Object} object object to add\\n     */\\n    addObject(object) {\\n        this.objects[object.id] = object;\\n    }\\n\\n    /**\\n     * Remove an object from the game world\\n     * @param {number} id id of the object to remove\\n     */\\n    removeObject(id) {\\n        delete this.objects[id];\\n    }\\n\\n    /**\\n     * World object iterator.\\n     * Invoke callback(objId, obj) for each object\\n     *\\n     * @param {function} callback function receives id and object. If callback returns false, the iteration will cease\\n     */\\n    forEachObject(callback) {\\n        for (let id of Object.keys(this.objects)) {\\n            let returnValue = callback(id, this.objects[id]);  // TODO: the key should be Number(id)\\n            if (returnValue === false) break;\\n        }\\n    }\\n\\n}\\n\\nexport default GameWorld;\\n\",\"/**\\n * Tracing Services.\\n * Use the trace functions to trace game state.  Turn on tracing by\\n * specifying the minimum trace level which should be recorded.  For\\n * example, setting traceLevel to Trace.TRACE_INFO will cause info,\\n * warn, and error traces to be recorded.\\n */\\nclass Trace {\\n\\n    constructor(options) {\\n\\n        this.options = Object.assign({\\n            traceLevel: this.TRACE_DEBUG\\n        }, options);\\n\\n        this.traceBuffer = [];\\n        this.step = 'initializing';\\n\\n        // syntactic sugar functions\\n        this.error = this.trace.bind(this, Trace.TRACE_ERROR);\\n        this.warn = this.trace.bind(this, Trace.TRACE_WARN);\\n        this.info = this.trace.bind(this, Trace.TRACE_INFO);\\n        this.debug = this.trace.bind(this, Trace.TRACE_DEBUG);\\n        this.trace = this.trace.bind(this, Trace.TRACE_ALL);\\n    }\\n\\n    /**\\n     * Include all trace levels.\\n     * @memberof Trace\\n     * @member {Number} TRACE_ALL\\n     */\\n    static get TRACE_ALL() { return 0; }\\n\\n     /**\\n      * Include debug traces and higher.\\n      * @memberof Trace\\n      * @member {Number} TRACE_DEBUG\\n      */\\n    static get TRACE_DEBUG() { return 1; }\\n\\n     /**\\n      * Include info traces and higher.\\n      * @memberof Trace\\n      * @member {Number} TRACE_INFO\\n      */\\n    static get TRACE_INFO() { return 2; }\\n\\n     /**\\n      * Include warn traces and higher.\\n      * @memberof Trace\\n      * @member {Number} TRACE_WARN\\n      */\\n    static get TRACE_WARN() { return 3; }\\n\\n     /**\\n      * Include error traces and higher.\\n      * @memberof Trace\\n      * @member {Number} TRACE_ERROR\\n      */\\n    static get TRACE_ERROR() { return 4; }\\n\\n     /**\\n      * Disable all tracing.\\n      * @memberof Trace\\n      * @member {Number} TRACE_NONE\\n      */\\n    static get TRACE_NONE() { return 1000; }\\n\\n    trace(level, dataCB) {\\n\\n         // all traces must be functions which return strings\\n        if (typeof dataCB !== 'function') {\\n            throw new Error(`Lance trace was called but instead of passing a function, it received a [${typeof dataCB}]`);\\n        }\\n\\n        if (level < this.options.traceLevel)\\n            return;\\n\\n        this.traceBuffer.push({ data: dataCB(), level, step: this.step, time: new Date() });\\n    }\\n\\n    rotate() {\\n        let buffer = this.traceBuffer;\\n        this.traceBuffer = [];\\n        return buffer;\\n    }\\n\\n    get length() {\\n        return this.traceBuffer.length;\\n    }\\n\\n    setStep(s) {\\n        this.step = s;\\n    }\\n}\\n\\nexport default Trace;\\n\",\"import GameWorld from './GameWorld';\\nimport EventEmitter from 'event-emitter';\\nimport Timer from './game/Timer';\\nimport Trace from './lib/Trace';\\n\\n/**\\n * The GameEngine contains the game logic.  Extend this class\\n * to implement game mechanics.  The GameEngine derived\\n * instance runs once on the server, where the final decisions\\n * are always taken, and one instance will run on each client as well,\\n * where the client emulates what it expects to be happening\\n * on the server.\\n *\\n * The game engine's logic must listen to user inputs and\\n * act on these inputs to change the game state.  For example,\\n * the game engine listens to controller/keyboard inputs to infer\\n * movement for the player/ship/first-person.  The game engine listens\\n * to clicks, button-presses to infer firing, etc..\\n *\\n * Note that the game engine runs on both the server and on the\\n * clients - but the server decisions always have the final say,\\n * and therefore clients must resolve server updates which conflict\\n * with client-side predictions.\\n */\\nclass GameEngine {\\n\\n    /**\\n      * Create a game engine instance.  This needs to happen\\n      * once on the server, and once on each client.\\n      *\\n      * @param {Object} options - options object\\n      * @param {Number} options.traceLevel - the trace level from 0 to 5.  Lower value traces more.\\n      * @param {Number} options.delayInputCount - client side only.  Introduce an artificial delay on the client to better match the time it will occur on the server.  This value sets the number of steps the client will wait before applying the input locally\\n      */\\n    constructor(options) {\\n\\n        // place the game engine in the LANCE globals\\n        const isServerSide = (typeof window === 'undefined');\\n        const glob = isServerSide ? global : window;\\n        glob.LANCE = { gameEngine: this };\\n\\n        // set options\\n        const defaultOpts = { GameWorld: GameWorld, traceLevel: Trace.TRACE_NONE };\\n        if (!isServerSide) defaultOpts.clientIDSpace = 1000000;\\n        this.options = Object.assign(defaultOpts, options);\\n\\n        /**\\n         * client's player ID, as a string. If running on the client, this is set at runtime by the clientEngine\\n         * @member {String}\\n         */\\n        this.playerId = NaN;\\n\\n        // set up event emitting and interface\\n        let eventEmitter = new EventEmitter();\\n\\n        /**\\n         * Register a handler for an event\\n         *\\n         * @method on\\n         * @memberof GameEngine\\n         * @instance\\n         * @param {String} eventName - name of the event\\n         * @param {Function} eventHandler - handler function\\n         */\\n        this.on = eventEmitter.on;\\n\\n        /**\\n         * Register a handler for an event, called just once (if at all)\\n         *\\n         * @method once\\n         * @memberof GameEngine\\n         * @instance\\n         * @param {String} eventName - name of the event\\n         * @param {Function} eventHandler - handler function\\n         */\\n        this.once = eventEmitter.once;\\n\\n        /**\\n         * Remove a handler\\n         *\\n         * @method removeListener\\n         * @memberof GameEngine\\n         * @instance\\n         * @param {String} eventName - name of the event\\n         * @param {Function} eventHandler - handler function\\n         */\\n        this.removeListener = eventEmitter.off;\\n        this.off = eventEmitter.off;\\n\\n        this.emit = eventEmitter.emit;\\n\\n        // set up trace\\n        this.trace = new Trace({ traceLevel: this.options.traceLevel });\\n    }\\n\\n    findLocalShadow(serverObj) {\\n\\n        for (let localId of Object.keys(this.world.objects)) {\\n            if (Number(localId) < this.options.clientIDSpace) continue;\\n            let localObj = this.world.objects[localId];\\n            if (localObj.hasOwnProperty('inputId') && localObj.inputId === serverObj.inputId)\\n                return localObj;\\n        }\\n\\n        return null;\\n    }\\n\\n    initWorld(worldSettings) {\\n\\n        this.world = new GameWorld();\\n\\n        // on the client we have a different ID space\\n        if (this.options.clientIDSpace) {\\n            this.world.idCount = this.options.clientIDSpace;\\n        }\\n\\n        /**\\n        * The worldSettings defines the game world constants, such\\n        * as width, height, depth, etc. such that all other classes\\n        * can reference these values.\\n        * @member {Object} worldSettings\\n        * @memberof GameEngine\\n        */\\n        this.worldSettings = Object.assign({}, worldSettings);\\n    }\\n\\n    /**\\n      * Start the game. This method runs on both server\\n      * and client. Extending the start method is useful\\n      * for setting up the game's worldSettings attribute,\\n      * and registering methods on the event handler.\\n      */\\n    start() {\\n        this.trace.info(() => '========== game engine started ==========');\\n        this.initWorld();\\n\\n        // create the default timer\\n        this.timer = new Timer();\\n        this.timer.play();\\n        this.on('postStep', (step, isReenact) => {\\n            if (!isReenact) this.timer.tick();\\n        });\\n\\n        this.emit('start', { timestamp: (new Date()).getTime() });\\n    }\\n\\n    /**\\n      * Single game step.\\n      *\\n      * @param {Boolean} isReenact - is this step a re-enactment of the past.\\n      * @param {Number} t - the current time (optional)\\n      * @param {Number} dt - elapsed time since last step was called.  (optional)\\n      * @param {Boolean} physicsOnly - do a physics step only, no game logic\\n      */\\n    step(isReenact, t, dt, physicsOnly) {\\n        // physics-only step\\n        if (physicsOnly) {\\n            if (dt) dt /= 1000; // physics engines work in seconds\\n            this.physicsEngine.step(dt, objectFilter);\\n            return;\\n        }\\n\\n        // emit preStep event\\n        if (isReenact === undefined)\\n            throw new Error('game engine does not forward argument isReenact to super class');\\n\\n        isReenact = Boolean(isReenact);\\n        let step = ++this.world.stepCount;\\n        let clientIDSpace = this.options.clientIDSpace;\\n        this.emit('preStep', { step, isReenact, dt });\\n\\n        // skip physics for shadow objects during re-enactment\\n        function objectFilter(o) {\\n            return !isReenact || o.id < clientIDSpace;\\n        }\\n\\n        // physics step\\n        if (this.physicsEngine && !this.ignorePhysics) {\\n            if (dt) dt /= 1000; // physics engines work in seconds\\n            this.physicsEngine.step(dt, objectFilter);\\n        }\\n\\n        // for each object\\n        // - apply incremental bending\\n        // - refresh object positions after physics\\n        this.world.forEachObject((id, o) => {\\n            if (typeof o.refreshFromPhysics === 'function')\\n                o.refreshFromPhysics();\\n            this.trace.trace(() => `object[${id}] after ${isReenact ? 'reenact' : 'step'} : ${o.toString()}`);\\n        });\\n\\n        // emit postStep event\\n        this.emit('postStep', { step, isReenact });\\n    }\\n\\n    /**\\n     * Add object to the game world.\\n     * On the client side, the object may not be created, if the server copy\\n     * of this object is already in the game world.  This could happen when the client\\n     * is using delayed-input, and the RTT is very low.\\n     *\\n     * @param {Object} object - the object.\\n     * @return {Object} object - the final object.\\n     */\\n    addObjectToWorld(object) {\\n\\n        // if we are asked to create a local shadow object\\n        // the server copy may already have arrived.\\n        if (Number(object.id) >= this.options.clientIDSpace) {\\n            let serverCopyArrived = false;\\n            this.world.forEachObject((id, o) => {\\n                if (o.hasOwnProperty('inputId') && o.inputId === object.inputId) {\\n                    serverCopyArrived = true;\\n                    return false;\\n                }\\n            });\\n            if (serverCopyArrived) {\\n                this.trace.info(() => `========== shadow object NOT added ${object.toString()} ==========`);\\n                return null;\\n            }\\n        }\\n\\n        this.world.addObject(object);\\n\\n        // tell the object to join the game, by creating\\n        // its corresponding physical entities and renderer entities.\\n        if (typeof object.onAddToWorld === 'function')\\n            object.onAddToWorld(this);\\n\\n        this.emit('objectAdded', object);\\n        this.trace.info(() => `========== object added ${object.toString()} ==========`);\\n\\n        return object;\\n    }\\n\\n    /**\\n     * Override this function to implement input handling.\\n     * This method will be called on the specific client where the\\n     * input was received, and will also be called on the server\\n     * when the input reaches the server.  The client does not call this\\n     * method directly, rather the client calls {@link ClientEngine#sendInput}\\n     * so that the input is sent to both server and client, and so that\\n     * the input is delayed artificially if so configured.\\n     *\\n     * The input is described by a short string, and is given an index.\\n     * The index is used internally to keep track of inputs which have already been applied\\n     * on the client during synchronization.  The input is also associated with\\n     * the ID of a player.\\n     *\\n     * @param {Object} inputDesc - input descriptor object\\n     * @param {String} inputDesc.input - describe the input (e.g. \\\"up\\\", \\\"down\\\", \\\"fire\\\")\\n     * @param {Number} inputDesc.messageIndex - input identifier\\n     * @param {Number} inputDesc.step - the step on which this input occurred\\n     * @param {Number} playerId - the player ID\\n     * @param {Boolean} isServer - indicate if this function is being called on the server side\\n     */\\n    processInput(inputDesc, playerId, isServer) {\\n        this.trace.info(() => `game engine processing input[${inputDesc.messageIndex}] <${inputDesc.input}> from playerId ${playerId}`);\\n    }\\n\\n    /**\\n     * Remove an object from the game world.\\n     *\\n     * @param {Object|String} objectId - the object or object ID\\n     */\\n    removeObjectFromWorld(objectId) {\\n\\n        if (typeof objectId === 'object') objectId = objectId.id;\\n        let object = this.world.objects[objectId];\\n\\n        if (!object) {\\n            throw new Error(`Game attempted to remove a game object which doesn't (or never did) exist, id=${objectId}`);\\n        }\\n        this.trace.info(() => `========== destroying object ${object.toString()} ==========`);\\n\\n        if (typeof object.onRemoveFromWorld === 'function')\\n            object.onRemoveFromWorld(this);\\n\\n        this.emit('objectDestroyed', object);\\n        this.world.removeObject(objectId);\\n    }\\n\\n    /**\\n     * Check if a given object is owned by the player on this client\\n     *\\n     * @param {Object} object the game object to check\\n     * @return {Boolean} true if the game object is owned by the player on this client\\n     */\\n    isOwnedByPlayer(object) {\\n        return (object.playerId == this.playerId);\\n    }\\n\\n    /**\\n     * Register Game Object Classes\\n     *\\n     * @example\\n     * registerClasses(serializer) {\\n     *   serializer.registerClass(require('../common/Paddle'));\\n     *   serializer.registerClass(require('../common/Ball'));\\n     * }\\n     *\\n     * @param {Serializer} serializer - the serializer\\n     */\\n    registerClasses(serializer) {\\n    }\\n\\n    /**\\n     * Decide whether the player game is over by returning an Object, need to be implemented\\n     *\\n     * @return {Object} truthful if the game is over for the player and the object is returned as GameOver data\\n     */\\n    getPlayerGameOverResult() {\\n        return null;\\n    }\\n}\\n\\n/**\\n * EVENTS\\n */\\n\\n/**\\n * Marks the beginning of a new game step\\n *\\n * @event GameEngine#preStep\\n * @param {Number} stepNumber - the step number\\n * @param {Boolean} isReenact - is this step a re-enactment\\n */\\n\\n/**\\n * Marks the end of a game step\\n *\\n * @event GameEngine#postStep\\n * @param {Number} stepNumber - the step number\\n * @param {Boolean} isReenact - is this step a re-enactment\\n */\\n\\n/**\\n * An object has been added to the world\\n *\\n * @event GameEngine#objectAdded\\n * @param {Object} obj - the new object\\n */\\n\\n/**\\n * An object has been removed from the world\\n *\\n * @event GameEngine#objectDestroyed\\n * @param {Object} obj - the object\\n */\\n\\n/**\\n * A player has joined\\n *\\n * @event GameEngine#playerJoined\\n * @param {Number} joinTime - epoch of join time\\n * @param {Object} playerDesc - player descriptor\\n * @param {String} playerDesc.playerId - the player ID\\n */\\n\\n/**\\n * A player has left\\n *\\n * @event GameEngine#playerDisconnected\\n * @param {Number} joinTime - epoch of join time\\n * @param {Number} disconnectTime - epoch of disconnect time\\n * @param {Object} playerDesc - player descriptor\\n * @param {String} playerDesc.playerId - the player ID\\n */\\n\\n/**\\n * A player has joined on the server\\n *\\n * @event GameEngine#server__playerJoined\\n * @param {Number} joinTime - epoch of join time\\n * @param {Object} playerDesc - player descriptor\\n * @param {String} playerDesc.playerId - the player ID\\n */\\n\\n/**\\n  * A player has left on the server\\n  *\\n  * @event GameEngine#server__playerDisconnected\\n  * @param {Number} joinTime - epoch of join time\\n  * @param {Number} disconnectTime - epoch of disconnect time\\n  * @param {Object} playerDesc - player descriptor\\n  * @param {String} playerDesc.playerId - the player ID\\n  */\\n\\n/**\\n * A synchronization update arrived from the server\\n *\\n * @event GameEngine#syncReceived\\n * @param {Object} sync - the synchronization object\\n */\\n\\n /**\\n  * Marks the beginning of a game step on the client\\n  *\\n  * @event GameEngine#client__preStep\\n  */\\n\\n /**\\n  * Marks the end of a game step on the client\\n  *\\n  * @event GameEngine#client__postStep\\n  */\\n\\n/**\\n * An input needs to be handled.  Emitted just before the GameEngine\\n * method processInput is invoked.\\n *\\n * @event GameEngine#processInput\\n * @param {Object} input - input descriptor object\\n * @param {String} input.input - describe the input (e.g. \\\"up\\\", \\\"down\\\", \\\"fire\\\")\\n * @param {Number} input.messageIndex - input identifier\\n * @param {Object} input.options - the object which was passed as SendInput's InputOptions parameter\\n * @param {Number} input.step - input execution step\\n * @param {Number} playerId - the player ID\\n */\\n\\n/**\\n * An input needs to be handled.\\n * This event is emitted on the server only, just before the\\n * general processInput event.\\n *\\n * @event GameEngine#server__processInput\\n * @param {Object} input - input descriptor object\\n * @param {String} input.input - describe the input (e.g. \\\"up\\\", \\\"down\\\", \\\"fire\\\")\\n * @param {Number} input.messageIndex - input identifier\\n * @param {Object} input.options - the object which was passed as SendInput's InputOptions parameter\\n * @param {Number} input.step - input execution step\\n * @param {Number} playerId - the player ID\\n */\\n\\n /**\\n  * Client moved from one room to another\\n  *\\n  * @event GameEngine#server__roomUpdate\\n  * @param {Number} playerId - the player ID\\n  * @param {String} from - the room from which the client came\\n  * @param {String} to - the room to which the client went\\n  */\\n\\n/**\\n * An input needs to be handled.\\n * This event is emitted on the client only, just before the\\n * general processInput event.\\n *\\n * @event GameEngine#client__processInput\\n * @param {Object} input - input descriptor object\\n * @param {String} input.input - describe the input (e.g. \\\"up\\\", \\\"down\\\", \\\"fire\\\")\\n * @param {Number} input.messageIndex - input identifier\\n * @param {Object} input.options - the object which was passed as SendInput's InputOptions parameter\\n * @param {Number} input.step - input execution step\\n * @param {Number} playerId - the player ID\\n */\\n\\n/**\\n * Client received a sync from the server\\n *\\n * @event GameEngine#client__syncReceived\\n * @param {Object} sync - sync from the server\\n * @param {Array} syncEvents - array of events in the sync\\n * @param {Number} maxStepCount - highest step in the sync\\n */\\n\\n /**\\n  * Client moved from one room to another\\n  *\\n  * @event GameEngine#client__roomUpdate\\n  * @param {Number} playerId - the player ID\\n  * @param {String} from - the room from which the client came\\n  * @param {String} to - the room to which the client went\\n  */\\n\\n /**\\n  * Client reset the world step\\n  *\\n  * @event GameEngine#client__stepReset\\n  * @param {Object} resetDesc - sync from the server\\n  * @param {Number} oldStep - the old step count\\n  * @param {Number} newStep - the new step count\\n  */\\n\\n/**\\n * Marks the beginning of a game step on the server\\n *\\n * @event GameEngine#server__preStep\\n * @param {Number} stepNumber - the step number\\n */\\n\\n/**\\n * Marks the end of a game step on the server\\n *\\n * @event GameEngine#server__postStep\\n * @param {Number} stepNumber - the step number\\n */\\n\\n/**\\n * User input received on the server\\n *\\n * @event GameEngine#server__inputReceived\\n * @param {Object} input - input descriptor\\n * @param {Object} input.data - input descriptor\\n * @param {String} input.playerId - player that sent the input\\n */\\n\\n /**\\n  * Report slow frame rate on the browser.\\n  * The browser did not achieve a reasonable frame rate\\n  *\\n  * @event GameEngine#client__slowFrameRate\\n  */\\n\\n  /**\\n   * server has started\\n   *\\n   * @event GameEngine#start\\n   * @param {Number} timestamp - UTC epoch of start time\\n   */\\n\\n// TODO: the declaration \\\"export default\\\" could be done as part of the class\\n// declaration up above, but the current version of jsdoc doesn't support this.\\n// when jsdoc is fixed, move this descriptor back to the class declaration,\\n// in all relevant files (12 files)\\n// see: https://github.com/jsdoc3/jsdoc/issues/1132\\nexport default GameEngine;\\n\",\"'use strict';\\n\\nvar d        = require('d')\\n  , callable = require('es5-ext/object/valid-callable')\\n\\n  , apply = Function.prototype.apply, call = Function.prototype.call\\n  , create = Object.create, defineProperty = Object.defineProperty\\n  , defineProperties = Object.defineProperties\\n  , hasOwnProperty = Object.prototype.hasOwnProperty\\n  , descriptor = { configurable: true, enumerable: false, writable: true }\\n\\n  , on, once, off, emit, methods, descriptors, base;\\n\\non = function (type, listener) {\\n\\tvar data;\\n\\n\\tcallable(listener);\\n\\n\\tif (!hasOwnProperty.call(this, '__ee__')) {\\n\\t\\tdata = descriptor.value = create(null);\\n\\t\\tdefineProperty(this, '__ee__', descriptor);\\n\\t\\tdescriptor.value = null;\\n\\t} else {\\n\\t\\tdata = this.__ee__;\\n\\t}\\n\\tif (!data[type]) data[type] = listener;\\n\\telse if (typeof data[type] === 'object') data[type].push(listener);\\n\\telse data[type] = [data[type], listener];\\n\\n\\treturn this;\\n};\\n\\nonce = function (type, listener) {\\n\\tvar once, self;\\n\\n\\tcallable(listener);\\n\\tself = this;\\n\\ton.call(this, type, once = function () {\\n\\t\\toff.call(self, type, once);\\n\\t\\tapply.call(listener, this, arguments);\\n\\t});\\n\\n\\tonce.__eeOnceListener__ = listener;\\n\\treturn this;\\n};\\n\\noff = function (type, listener) {\\n\\tvar data, listeners, candidate, i;\\n\\n\\tcallable(listener);\\n\\n\\tif (!hasOwnProperty.call(this, '__ee__')) return this;\\n\\tdata = this.__ee__;\\n\\tif (!data[type]) return this;\\n\\tlisteners = data[type];\\n\\n\\tif (typeof listeners === 'object') {\\n\\t\\tfor (i = 0; (candidate = listeners[i]); ++i) {\\n\\t\\t\\tif ((candidate === listener) ||\\n\\t\\t\\t\\t\\t(candidate.__eeOnceListener__ === listener)) {\\n\\t\\t\\t\\tif (listeners.length === 2) data[type] = listeners[i ? 0 : 1];\\n\\t\\t\\t\\telse listeners.splice(i, 1);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t} else {\\n\\t\\tif ((listeners === listener) ||\\n\\t\\t\\t\\t(listeners.__eeOnceListener__ === listener)) {\\n\\t\\t\\tdelete data[type];\\n\\t\\t}\\n\\t}\\n\\n\\treturn this;\\n};\\n\\nemit = function (type) {\\n\\tvar i, l, listener, listeners, args;\\n\\n\\tif (!hasOwnProperty.call(this, '__ee__')) return;\\n\\tlisteners = this.__ee__[type];\\n\\tif (!listeners) return;\\n\\n\\tif (typeof listeners === 'object') {\\n\\t\\tl = arguments.length;\\n\\t\\targs = new Array(l - 1);\\n\\t\\tfor (i = 1; i < l; ++i) args[i - 1] = arguments[i];\\n\\n\\t\\tlisteners = listeners.slice();\\n\\t\\tfor (i = 0; (listener = listeners[i]); ++i) {\\n\\t\\t\\tapply.call(listener, this, args);\\n\\t\\t}\\n\\t} else {\\n\\t\\tswitch (arguments.length) {\\n\\t\\tcase 1:\\n\\t\\t\\tcall.call(listeners, this);\\n\\t\\t\\tbreak;\\n\\t\\tcase 2:\\n\\t\\t\\tcall.call(listeners, this, arguments[1]);\\n\\t\\t\\tbreak;\\n\\t\\tcase 3:\\n\\t\\t\\tcall.call(listeners, this, arguments[1], arguments[2]);\\n\\t\\t\\tbreak;\\n\\t\\tdefault:\\n\\t\\t\\tl = arguments.length;\\n\\t\\t\\targs = new Array(l - 1);\\n\\t\\t\\tfor (i = 1; i < l; ++i) {\\n\\t\\t\\t\\targs[i - 1] = arguments[i];\\n\\t\\t\\t}\\n\\t\\t\\tapply.call(listeners, this, args);\\n\\t\\t}\\n\\t}\\n};\\n\\nmethods = {\\n\\ton: on,\\n\\tonce: once,\\n\\toff: off,\\n\\temit: emit\\n};\\n\\ndescriptors = {\\n\\ton: d(on),\\n\\tonce: d(once),\\n\\toff: d(off),\\n\\temit: d(emit)\\n};\\n\\nbase = defineProperties({}, descriptors);\\n\\nmodule.exports = exports = function (o) {\\n\\treturn (o == null) ? create(base) : defineProperties(Object(o), descriptors);\\n};\\nexports.methods = methods;\\n\",\"// TODO: needs documentation\\n// I think the API could be simpler\\n//   - Timer.run(waitSteps, cb)\\n//   - Timer.repeat(waitSteps, count, cb) // count=null=>forever\\n//   - Timer.cancel(cb)\\nexport default class Timer {\\n\\n    constructor() {\\n        this.currentTime = 0;\\n        this.isActive = false;\\n        this.idCounter = 0;\\n\\n        this.events = {};\\n    }\\n\\n    play() {\\n        this.isActive = true;\\n    }\\n\\n    tick() {\\n        let event;\\n        let eventId;\\n\\n        if (this.isActive) {\\n            this.currentTime++;\\n\\n            for (eventId in this.events) {\\n                event = this.events[eventId];\\n                if (event) {\\n\\n                    if (event.type == 'repeat') {\\n                        if ((this.currentTime - event.startOffset) % event.time == 0) {\\n                            event.callback.apply(event.thisContext, event.args);\\n                        }\\n                    }\\n                    if (event.type == 'single') {\\n                        if ((this.currentTime - event.startOffset) % event.time == 0) {\\n                            event.callback.apply(event.thisContext, event.args);\\n                            event.destroy();\\n                        }\\n                    }\\n\\n                }\\n\\n            }\\n        }\\n    }\\n\\n    destroyEvent(eventId) {\\n        delete this.events[eventId];\\n    }\\n\\n    loop(time, callback) {\\n        let timerEvent = new TimerEvent(this,\\n            TimerEvent.TYPES.repeat,\\n            time,\\n            callback\\n        );\\n\\n        this.events[timerEvent.id] = timerEvent;\\n\\n        return timerEvent;\\n    }\\n\\n    add(time, callback, thisContext, args) {\\n        let timerEvent = new TimerEvent(this,\\n            TimerEvent.TYPES.single,\\n            time,\\n            callback,\\n            thisContext,\\n            args\\n        );\\n\\n        this.events[timerEvent.id] = timerEvent;\\n        return timerEvent;\\n    }\\n\\n    // todo implement timer delete all events\\n\\n    destroy(id) {\\n        delete this.events[id];\\n    }\\n}\\n\\n// timer event\\nclass TimerEvent {\\n    constructor(timer, type, time, callback, thisContext, args) {\\n        this.id = ++timer.idCounter;\\n        this.timer = timer;\\n        this.type = type;\\n        this.time = time;\\n        this.callback = callback;\\n        this.startOffset = timer.currentTime;\\n        this.thisContext = thisContext;\\n        this.args = args;\\n\\n        this.destroy = function() {\\n            this.timer.destroy(this.id);\\n        };\\n    }\\n}\\n\\nTimerEvent.TYPES = {\\n    repeat: 'repeat',\\n    single: 'single'\\n};\\n\",\"export default class Utils {\\n\\n    static hashStr(str, bits) {\\n        let hash = 5381;\\n        let i = str.length;\\n        bits = bits ? bits : 8;\\n\\n        while (i) {\\n            hash = (hash * 33) ^ str.charCodeAt(--i);\\n        }\\n        hash = hash >>> 0;\\n        hash = hash % (Math.pow(2, bits) - 1);\\n\\n        // JavaScript does bitwise operations (like XOR, above) on 32-bit signed\\n        // integers. Since we want the results to be always positive, convert the\\n        // signed int to an unsigned by doing an unsigned bitshift. */\\n        return hash;\\n    }\\n\\n    static arrayBuffersEqual(buf1, buf2) {\\n        if (buf1.byteLength !== buf2.byteLength) return false;\\n        let dv1 = new Int8Array(buf1);\\n        let dv2 = new Int8Array(buf2);\\n        for (let i = 0; i !== buf1.byteLength; i++) {\\n            if (dv1[i] !== dv2[i]) return false;\\n        }\\n        return true;\\n    }\\n\\n    static httpGetPromise(url) {\\n        return new Promise((resolve, reject) => {\\n            let req = new XMLHttpRequest();\\n            req.open('GET', url, true);\\n            req.onload = () => {\\n                if (req.status >= 200 && req.status < 400) resolve(JSON.parse(req.responseText));\\n                else reject();\\n            };\\n            req.onerror = () => {};\\n            req.send();\\n        });\\n    }\\n}\",\"var g;\\n\\n// This works in non-strict mode\\ng = (function() {\\n\\treturn this;\\n})();\\n\\ntry {\\n\\t// This works if eval is allowed (see CSP)\\n\\tg = g || new Function(\\\"return this\\\")();\\n} catch (e) {\\n\\t// This works if the window reference is available\\n\\tif (typeof window === \\\"object\\\") g = window;\\n}\\n\\n// g can still be undefined, but nothing to do about it...\\n// We return undefined, instead of nothing here, so it's\\n// easier to handle this case. if(!global) { ...}\\n\\nmodule.exports = g;\\n\",\"'use strict';\\n\\nvar assign        = require('es5-ext/object/assign')\\n  , normalizeOpts = require('es5-ext/object/normalize-options')\\n  , isCallable    = require('es5-ext/object/is-callable')\\n  , contains      = require('es5-ext/string/#/contains')\\n\\n  , d;\\n\\nd = module.exports = function (dscr, value/*, options*/) {\\n\\tvar c, e, w, options, desc;\\n\\tif ((arguments.length < 2) || (typeof dscr !== 'string')) {\\n\\t\\toptions = value;\\n\\t\\tvalue = dscr;\\n\\t\\tdscr = null;\\n\\t} else {\\n\\t\\toptions = arguments[2];\\n\\t}\\n\\tif (dscr == null) {\\n\\t\\tc = w = true;\\n\\t\\te = false;\\n\\t} else {\\n\\t\\tc = contains.call(dscr, 'c');\\n\\t\\te = contains.call(dscr, 'e');\\n\\t\\tw = contains.call(dscr, 'w');\\n\\t}\\n\\n\\tdesc = { value: value, configurable: c, enumerable: e, writable: w };\\n\\treturn !options ? desc : assign(normalizeOpts(options), desc);\\n};\\n\\nd.gs = function (dscr, get, set/*, options*/) {\\n\\tvar c, e, options, desc;\\n\\tif (typeof dscr !== 'string') {\\n\\t\\toptions = set;\\n\\t\\tset = get;\\n\\t\\tget = dscr;\\n\\t\\tdscr = null;\\n\\t} else {\\n\\t\\toptions = arguments[3];\\n\\t}\\n\\tif (get == null) {\\n\\t\\tget = undefined;\\n\\t} else if (!isCallable(get)) {\\n\\t\\toptions = get;\\n\\t\\tget = set = undefined;\\n\\t} else if (set == null) {\\n\\t\\tset = undefined;\\n\\t} else if (!isCallable(set)) {\\n\\t\\toptions = set;\\n\\t\\tset = undefined;\\n\\t}\\n\\tif (dscr == null) {\\n\\t\\tc = true;\\n\\t\\te = false;\\n\\t} else {\\n\\t\\tc = contains.call(dscr, 'c');\\n\\t\\te = contains.call(dscr, 'e');\\n\\t}\\n\\n\\tdesc = { get: get, set: set, configurable: c, enumerable: e };\\n\\treturn !options ? desc : assign(normalizeOpts(options), desc);\\n};\\n\",\"\\\"use strict\\\";\\n\\nmodule.exports = require(\\\"./is-implemented\\\")()\\n\\t? Object.assign\\n\\t: require(\\\"./shim\\\");\\n\",\"\\\"use strict\\\";\\n\\nmodule.exports = function () {\\n\\tvar assign = Object.assign, obj;\\n\\tif (typeof assign !== \\\"function\\\") return false;\\n\\tobj = { foo: \\\"raz\\\" };\\n\\tassign(obj, { bar: \\\"dwa\\\" }, { trzy: \\\"trzy\\\" });\\n\\treturn (obj.foo + obj.bar + obj.trzy) === \\\"razdwatrzy\\\";\\n};\\n\",\"\\\"use strict\\\";\\n\\nvar keys  = require(\\\"../keys\\\")\\n  , value = require(\\\"../valid-value\\\")\\n  , max   = Math.max;\\n\\nmodule.exports = function (dest, src /*, …srcn*/) {\\n\\tvar error, i, length = max(arguments.length, 2), assign;\\n\\tdest = Object(value(dest));\\n\\tassign = function (key) {\\n\\t\\ttry {\\n\\t\\t\\tdest[key] = src[key];\\n\\t\\t} catch (e) {\\n\\t\\t\\tif (!error) error = e;\\n\\t\\t}\\n\\t};\\n\\tfor (i = 1; i < length; ++i) {\\n\\t\\tsrc = arguments[i];\\n\\t\\tkeys(src).forEach(assign);\\n\\t}\\n\\tif (error !== undefined) throw error;\\n\\treturn dest;\\n};\\n\",\"\\\"use strict\\\";\\n\\nmodule.exports = require(\\\"./is-implemented\\\")() ? Object.keys : require(\\\"./shim\\\");\\n\",\"\\\"use strict\\\";\\n\\nmodule.exports = function () {\\n\\ttry {\\n\\t\\tObject.keys(\\\"primitive\\\");\\n\\t\\treturn true;\\n\\t} catch (e) {\\n\\t\\treturn false;\\n\\t}\\n};\\n\",\"\\\"use strict\\\";\\n\\nvar isValue = require(\\\"../is-value\\\");\\n\\nvar keys = Object.keys;\\n\\nmodule.exports = function (object) { return keys(isValue(object) ? Object(object) : object); };\\n\",\"\\\"use strict\\\";\\n\\n// eslint-disable-next-line no-empty-function\\nmodule.exports = function () {};\\n\",\"\\\"use strict\\\";\\n\\nvar isValue = require(\\\"./is-value\\\");\\n\\nmodule.exports = function (value) {\\n\\tif (!isValue(value)) throw new TypeError(\\\"Cannot use null or undefined\\\");\\n\\treturn value;\\n};\\n\",\"\\\"use strict\\\";\\n\\nvar isValue = require(\\\"./is-value\\\");\\n\\nvar forEach = Array.prototype.forEach, create = Object.create;\\n\\nvar process = function (src, obj) {\\n\\tvar key;\\n\\tfor (key in src) obj[key] = src[key];\\n};\\n\\n// eslint-disable-next-line no-unused-vars\\nmodule.exports = function (opts1 /*, …options*/) {\\n\\tvar result = create(null);\\n\\tforEach.call(arguments, function (options) {\\n\\t\\tif (!isValue(options)) return;\\n\\t\\tprocess(Object(options), result);\\n\\t});\\n\\treturn result;\\n};\\n\",\"// Deprecated\\n\\n\\\"use strict\\\";\\n\\nmodule.exports = function (obj) {\\n return typeof obj === \\\"function\\\";\\n};\\n\",\"\\\"use strict\\\";\\n\\nmodule.exports = require(\\\"./is-implemented\\\")()\\n\\t? String.prototype.contains\\n\\t: require(\\\"./shim\\\");\\n\",\"\\\"use strict\\\";\\n\\nvar str = \\\"razdwatrzy\\\";\\n\\nmodule.exports = function () {\\n\\tif (typeof str.contains !== \\\"function\\\") return false;\\n\\treturn (str.contains(\\\"dwa\\\") === true) && (str.contains(\\\"foo\\\") === false);\\n};\\n\",\"\\\"use strict\\\";\\n\\nvar indexOf = String.prototype.indexOf;\\n\\nmodule.exports = function (searchString/*, position*/) {\\n\\treturn indexOf.call(this, searchString, arguments[1]) > -1;\\n};\\n\",\"\\\"use strict\\\";\\n\\nmodule.exports = function (fn) {\\n\\tif (typeof fn !== \\\"function\\\") throw new TypeError(fn + \\\" is not a function\\\");\\n\\treturn fn;\\n};\\n\",\"import Serializable from './Serializable';\\nimport BaseTypes from './BaseTypes';\\n\\n/**\\n * GameObject is the base class of all game objects.\\n * It is created only for the purpose of clearly defining the game\\n * object interface.\\n * Game developers will use one of the subclasses such as DynamicObject,\\n * or PhysicalObject.\\n */\\nclass GameObject extends Serializable {\\n\\n    static get netScheme() {\\n        return {\\n            id: { type: BaseTypes.TYPES.INT32 }\\n        };\\n    }\\n\\n    /**\\n    * Creates an instance of a game object.\\n    * @param {GameEngine} gameEngine - the gameEngine this object will be used in\\n    * @param {Object} options - options for instantiation of the GameObject\\n    * @param {Number} id - if set, the new instantiated object will be set to this id instead of being generated a new one. Use with caution!\\n    */\\n    constructor(gameEngine, options) {\\n        super();\\n        /**\\n         * The gameEngine this object will be used in\\n         * @member {GameEngine}\\n         */\\n        this.gameEngine = gameEngine;\\n\\n        /**\\n        * ID of this object's instance.\\n        * There are three cases of instance creation which can occur:\\n        * 1. In the normal case, the constructor is asked to assign an ID which is unique\\n        * across the entire game world, including the server and all the clients.\\n        * 2. In extrapolation mode, the client may have an object instance which does not\\n        * yet exist on the server, these objects are known as shadow objects.  Their IDs must\\n        * be allocated from a different range.\\n        * 3. Also, temporary objects are created on the client side each time a sync is received.\\n        * These are used for interpolation purposes and as bending targets of position, velocity,\\n        * angular velocity, and orientation.  In this case the id will be set to null.\\n        * @member {Number}\\n        */\\n        this.id = null;\\n        if (options && 'id' in options)\\n            this.id = options.id;\\n        else if (this.gameEngine)\\n            this.id = this.gameEngine.world.getNewId();\\n\\n        this.components = {};\\n    }\\n\\n    /**\\n     * Called after the object is added to to the game world.\\n     * This is the right place to add renderer sub-objects, physics sub-objects\\n     * and any other resources that should be created\\n     * @param {GameEngine} gameEngine the game engine\\n     */\\n    onAddToWorld(gameEngine) {}\\n\\n    /**\\n     * Called after the object is removed from game-world.\\n     * This is where renderer sub-objects and any other resources should be freed\\n     * @param {GameEngine} gameEngine the game engine\\n     */\\n    onRemoveFromWorld(gameEngine) {}\\n\\n    /**\\n     * Formatted textual description of the game object.\\n     * @return {String} description - a string description\\n     */\\n    toString() {\\n        return `game-object[${this.id}]`;\\n    }\\n\\n    /**\\n     * Formatted textual description of the game object's current bending properties.\\n     * @return {String} description - a string description\\n     */\\n    bendingToString() {\\n        return 'no bending';\\n    }\\n\\n    saveState(other) {\\n        this.savedCopy = (new this.constructor(this.gameEngine, { id: null }));\\n        this.savedCopy.syncTo(other ? other : this);\\n    }\\n   /**\\n    * Bending is defined as the amount of error correction that will be applied\\n    * on the client side to a given object's physical attributes, incrementally,\\n    * by the time the next server broadcast is expected to arrive.\\n    *\\n    * When this percentage is 0.0, the client always ignores the server object's value.\\n    * When this percentage is 1.0, the server object's attributes will be applied in full.\\n    *\\n    * The GameObject bending attribute is implemented as a getter, and can provide\\n    * distinct values for position, velocity, angle, and angularVelocity.\\n    * And in each case, you can also provide overrides for local objects,\\n    * these attributes will be called, respectively, positionLocal, velocityLocal,\\n    * angleLocal, angularVelocityLocal.\\n    *\\n    * @example\\n    * get bending() {\\n    *   return {\\n    *     position: { percent: 1.0, min: 0.0 },\\n    *     velocity: { percent: 0.0, min: 0.0 },\\n    *     angularVelocity: { percent: 0.0 },\\n    *     angleLocal: { percent: 1.0 }\\n    *   }\\n    * };\\n    *\\n    * @memberof GameObject\\n    * @member {Object} bending\\n    */\\n    get bending() {\\n        return {\\n            position: { percent: 1.0, min: 0.0 },\\n            velocity: { percent: 0.0, min: 0.0 },\\n            angularVelocity: { percent: 0.0 },\\n            angleLocal: { percent: 1.0 }\\n        };\\n    }\\n\\n    // TODO:\\n    // rather than pass worldSettings on each bend, they could\\n    // be passed in on the constructor just once.\\n    bendToCurrentState(bending, worldSettings, isLocal, bendingIncrements) {\\n        if (this.savedCopy) {\\n            this.bendToCurrent(this.savedCopy, bending, worldSettings, isLocal, bendingIncrements);\\n        }\\n        this.savedCopy = null;\\n    }\\n\\n    bendToCurrent(original, bending, worldSettings, isLocal, bendingIncrements) {\\n    }\\n\\n    /**\\n     * synchronize this object to the state of an other object, by copying all the netscheme variables.\\n     * This is used by the synchronizer to create temporary objects, and must be implemented by all sub-classes as well.\\n     * @param {GameObject} other the other object to synchronize to\\n     */\\n    syncTo(other) {\\n        super.syncTo(other);\\n    }\\n\\n    // copy physical attributes to physics sub-object\\n    refreshToPhysics() {}\\n\\n    // copy physical attributes from physics sub-object\\n    refreshFromPhysics() {}\\n\\n    // apply a single bending increment\\n    applyIncrementalBending() { }\\n\\n    // clean up resources\\n    destroy() {}\\n\\n    addComponent(componentInstance) {\\n        componentInstance.parentObject = this;\\n        this.components[componentInstance.constructor.name] = componentInstance;\\n\\n        // a gameEngine might not exist if this class is instantiated by the serializer\\n        if (this.gameEngine) {\\n            this.gameEngine.emit('componentAdded', this, componentInstance);\\n        }\\n    }\\n\\n    removeComponent(componentName) {\\n        // todo cleanup of the component ?\\n        delete this.components[componentName];\\n\\n        // a gameEngine might not exist if this class is instantiated by the serializer\\n        if (this.gameEngine) {\\n            this.gameEngine.emit('componentRemoved', this, componentName);\\n        }\\n    }\\n\\n    /**\\n     * Check whether this game object has a certain component\\n     * @param {Object} componentClass the comp\\n     * @return {Boolean} true if the gameObject contains this component\\n     */\\n    hasComponent(componentClass) {\\n        return componentClass.name in this.components;\\n    }\\n\\n    getComponent(componentClass) {\\n        return this.components[componentClass.name];\\n    }\\n\\n}\\n\\nexport default GameObject;\\n\",\"export default class MathUtils {\\n\\n    // interpolate from start to end, advancing \\\"percent\\\" of the way\\n    static interpolate(start, end, percent) {\\n        return (end - start) * percent + start;\\n    }\\n\\n    // interpolate from start to end, advancing \\\"percent\\\" of the way\\n    //\\n    // returns just the delta. i.e. the value that must be added to the start value\\n    static interpolateDelta(start, end, percent) {\\n        return (end - start) * percent;\\n    }\\n\\n    // interpolate from start to end, advancing \\\"percent\\\" of the way\\n    // and noting that the dimension wraps around {x >= wrapMin, x < wrapMax}\\n    //\\n    // returns just the delta. i.e. the value that must be added to the start value\\n    static interpolateDeltaWithWrapping(start, end, percent, wrapMin, wrapMax) {\\n        let wrapTest = wrapMax - wrapMin;\\n        if (start - end > wrapTest / 2) end += wrapTest;\\n        else if (end - start > wrapTest / 2) start += wrapTest;\\n        if (Math.abs(start - end) > wrapTest / 3) {\\n            console.log('wrap interpolation is close to limit.  Not sure which edge to wrap to.');\\n        }\\n        return (end - start) * percent;\\n    }\\n\\n    static interpolateWithWrapping(start, end, percent, wrapMin, wrapMax) {\\n        let interpolatedVal = start + this.interpolateDeltaWithWrapping(start, end, percent, wrapMin, wrapMax);\\n        let wrapLength = wrapMax - wrapMin;\\n        if (interpolatedVal >= wrapLength) interpolatedVal -= wrapLength;\\n        if (interpolatedVal < 0) interpolatedVal += wrapLength;\\n        return interpolatedVal;\\n    }\\n}\",\"import TwoVector from './TwoVector';\\nimport GameObject from './GameObject';\\nimport BaseTypes from './BaseTypes';\\nimport MathUtils from '../lib/MathUtils';\\n\\n/**\\n * DynamicObject is the base class of the game's objects, for games which\\n * rely on SimplePhysicsEngine.  It defines the\\n * base object which can move around in the game world.  The\\n * extensions of this object (the subclasses)\\n * will be periodically synchronized from the server to every client.\\n *\\n * The dynamic objects have pseudo-physical properties, which\\n * allow the client to extrapolate the position\\n * of dynamic objects in-between server updates.\\n */\\nclass DynamicObject extends GameObject {\\n\\n    /**\\n    * The netScheme is a dictionary of attributes in this game\\n    * object.  The attributes listed in the netScheme are those exact\\n    * attributes which will be serialized and sent from the server\\n    * to each client on every server update.\\n    * The netScheme member is implemented as a getter.\\n    *\\n    * You may choose not to implement this method, in which\\n    * case your object only transmits the default attributes\\n    * which are already part of {@link DynamicObject}.\\n    * But if you choose to add more attributes, make sure\\n    * the return value includes the netScheme of the super class.\\n    *\\n    * @memberof DynamicObject\\n    * @member {Object} netScheme\\n    * @example\\n    *     static get netScheme() {\\n    *       return Object.assign({\\n    *           mojo: { type: BaseTypes.TYPES.UINT8 },\\n    *         }, super.netScheme);\\n    *     }\\n    */\\n    static get netScheme() {\\n        return Object.assign({\\n            playerId: { type: BaseTypes.TYPES.INT16 },\\n            position: { type: BaseTypes.TYPES.CLASSINSTANCE },\\n            width: { type: BaseTypes.TYPES.INT16 },\\n            height: { type: BaseTypes.TYPES.INT16 },\\n            isStatic: { type: BaseTypes.TYPES.UINT8 },\\n            velocity: { type: BaseTypes.TYPES.CLASSINSTANCE },\\n            angle: { type: BaseTypes.TYPES.FLOAT32 }\\n        }, super.netScheme);\\n    }\\n\\n    /**\\n    * Creates an instance of a dynamic object.\\n    * NOTE: all subclasses of this class must comply with this constructor signature.\\n    *       This is required because the engine will create temporary instances when\\n    *       syncs arrive on the clients.\\n    * @param {GameEngine} gameEngine - the gameEngine this object will be used in\\n    * @param {Object} options - options for the new object. See {@link GameObject}\\n    * @param {Object} props - properties to be set in the new object\\n    * @param {TwoVector} props.position - position vector\\n    * @param {TwoVector} props.velocity - velocity vector\\n    * @param {Number} props.height - object height\\n    * @param {Number} props.width - object width\\n    */\\n    constructor(gameEngine, options, props) {\\n        super(gameEngine, options);\\n\\n        /**\\n        * ID of player who created this object\\n        * @member {Number}\\n        */\\n        this.playerId = (props && props.playerId) ? props.playerId : 0;\\n\\n        this.bendingIncrements = 0;\\n\\n        this.position = new TwoVector(0, 0);\\n        this.velocity = new TwoVector(0, 0);\\n\\n        /**\\n         * Object width for collision detection purposes. Default is 1\\n         * @member {Number}\\n         */\\n        this.width = (props && props.width) ? props.width : 1;\\n\\n        /**\\n         * Object height for collision detection purposes. Default is 1\\n         * @member {Number}\\n         */\\n        this.height = (props && props.height) ? props.height : 1;\\n\\n        /**\\n         * Determine if the object is static (i.e. it never moves, like a wall). The value 0 implies the object is dynamic.  Default is 0 (dynamic).\\n         * @member {Number}\\n         */\\n        this.isStatic = (props && props.isStatic) ? props.isStatic : 0;\\n\\n        /**\\n         * The friction coefficient. Velocity is multiplied by this for each step. Default is (1,1)\\n         * @member {TwoVector}\\n         */\\n        this.friction = new TwoVector(1, 1);\\n\\n        /**\\n        * playerId\\n        * @member {Number}\\n        */\\n        if (props && props.playerId) this.playerId = props.playerId;\\n\\n        /**\\n        * position\\n        * @member {TwoVector}\\n        */\\n        if (props && props.position) this.position.copy(props.position);\\n\\n        /**\\n        * velocity\\n        * @member {TwoVector}\\n        */\\n        if (props && props.velocity) this.velocity.copy(props.velocity);\\n\\n        /**\\n        * object orientation angle in degrees\\n        * @member {Number}\\n        */\\n        this.angle = 90;\\n\\n        /**\\n        * @deprecated since version 3.0.8\\n        * should rotate left by {@link DynamicObject#rotationSpeed} on next step\\n        * @member {Boolean}\\n        */\\n        this.isRotatingLeft = false;\\n\\n        /**\\n        * @deprecated since version 3.0.8\\n        * should rotate right by {@link DynamicObject#rotationSpeed} on next step\\n        * @member {Boolean}\\n        */\\n        this.isRotatingRight = false;\\n\\n        /**\\n        * @deprecated since version 3.0.8\\n        * should accelerate by {@link DynamicObject#acceleration} on next step\\n        * @member {Boolean}\\n        */\\n        this.isAccelerating = false;\\n\\n        /**\\n        * @deprecated since version 3.0.8\\n        * angle rotation per step\\n        * @member {Number}\\n        */\\n        this.rotationSpeed = 2.5;\\n\\n        /**\\n        * @deprecated since version 3.0.8\\n        * acceleration per step\\n        * @member {Number}\\n        */\\n        this.acceleration = 0.1;\\n\\n        this.deceleration = 0.99;\\n    }\\n\\n    // convenience getters\\n    get x() { return this.position.x; }\\n    get y() { return this.position.y; }\\n\\n    /**\\n     * Formatted textual description of the dynamic object.\\n     * The output of this method is used to describe each instance in the traces,\\n     * which significantly helps in debugging.\\n     *\\n     * @return {String} description - a string describing the DynamicObject\\n     */\\n    toString() {\\n        function round3(x) { return Math.round(x * 1000) / 1000; }\\n        return `${this.constructor.name}[${this.id}] player${this.playerId} Pos=${this.position} Vel=${this.velocity} angle${round3(this.angle)}`;\\n    }\\n\\n    /**\\n     * Each object class can define its own bending overrides.\\n     * return an object which can include attributes: position, velocity,\\n     * and angle.  In each case, you can specify a min value, max\\n     * value, and a percent value.\\n     *\\n     * @return {Object} bending - an object with bending paramters\\n     */\\n    get bending() {\\n        return {\\n            // example:\\n            // position: { percent: 0.8, min: 0.0, max: 4.0 },\\n            // velocity: { percent: 0.4, min: 0.0 },\\n            // angleLocal: { percent: 0.0 }\\n        };\\n    }\\n\\n    /**\\n    * turn object clock-wise\\n    * @param {Number} deltaAngle - the angle to turn, in degrees\\n    * @return {DynamicObject} return this object\\n    */\\n    turnRight(deltaAngle) {\\n        this.angle += deltaAngle;\\n        if (this.angle >= 360) { this.angle -= 360; }\\n        if (this.angle < 0) { this.angle += 360; }\\n        return this;\\n    }\\n\\n    /**\\n    * turn object counter-clock-wise\\n    * @param {Number} deltaAngle - the angle to turn, in degrees\\n    * @return {DynamicObject} return this object\\n    */\\n    turnLeft(deltaAngle) {\\n        return this.turnRight(-deltaAngle);\\n    }\\n\\n    /**\\n    * accelerate along the direction that the object is facing\\n    * @param {Number} acceleration - the acceleration\\n    * @return {DynamicObject} return this object\\n    */\\n    accelerate(acceleration) {\\n        let rad = this.angle * (Math.PI / 180);\\n        let dv = new TwoVector(Math.cos(rad), Math.sin(rad));\\n        dv.multiplyScalar(acceleration);\\n        this.velocity.add(dv);\\n\\n        return this;\\n    }\\n\\n    /**\\n     * Formatted textual description of the game object's current bending properties.\\n     * @return {String} description - a string description\\n     */\\n    bendingToString() {\\n        if (this.bendingIncrements)\\n            return `ΔPos=${this.bendingPositionDelta} ΔVel=${this.bendingVelocityDelta} ΔAngle=${this.bendingAngleDelta} increments=${this.bendingIncrements}`;\\n        return 'no bending';\\n    }\\n\\n    /**\\n    * The maximum velocity allowed.  If returns null then ignored.\\n    * @memberof DynamicObject\\n    * @member {Number} maxSpeed\\n    */\\n    get maxSpeed() { return null; }\\n\\n    /**\\n    * Copy the netscheme variables from another DynamicObject\\n    * This is used by the synchronizer to create temporary objects, and must be implemented by all sub-classes as well.\\n    * @param {DynamicObject} other DynamicObject\\n    */\\n    syncTo(other) {\\n        super.syncTo(other);\\n        this.position.copy(other.position);\\n        this.velocity.copy(other.velocity);\\n        this.width = other.width;\\n        this.height = other.height;\\n        this.bendingAngle = other.bendingAngle;\\n        this.rotationSpeed = other.rotationSpeed;\\n        this.acceleration = other.acceleration;\\n        this.deceleration = other.deceleration;\\n    }\\n\\n    bendToCurrent(original, percent, worldSettings, isLocal, increments) {\\n\\n        let bending = { increments, percent };\\n        // if the object has defined a bending multiples for this object, use them\\n        let positionBending = Object.assign({}, bending, this.bending.position);\\n        let velocityBending = Object.assign({}, bending, this.bending.velocity);\\n        let angleBending = Object.assign({}, bending, this.bending.angle);\\n\\n        if (isLocal) {\\n            Object.assign(positionBending, this.bending.positionLocal);\\n            Object.assign(velocityBending, this.bending.velocityLocal);\\n            Object.assign(angleBending, this.bending.angleLocal);\\n        }\\n\\n        // get the incremental delta position & velocity\\n        this.incrementScale = percent / increments;\\n        this.bendingPositionDelta = original.position.getBendingDelta(this.position, positionBending);\\n        this.bendingVelocityDelta = original.velocity.getBendingDelta(this.velocity, velocityBending);\\n        this.bendingAngleDelta = MathUtils.interpolateDeltaWithWrapping(original.angle, this.angle, angleBending.percent, 0, 360) / increments;\\n\\n        this.bendingTarget = (new this.constructor());\\n        this.bendingTarget.syncTo(this);\\n\\n        // revert to original\\n        this.position.copy(original.position);\\n        this.velocity.copy(original.velocity);\\n        this.angle = original.angle;\\n\\n        // keep parameters\\n        this.bendingIncrements = increments;\\n        this.bendingOptions = bending;\\n    }\\n\\n    applyIncrementalBending(stepDesc) {\\n        if (this.bendingIncrements === 0)\\n            return;\\n\\n        let timeFactor = 1;\\n        if (stepDesc && stepDesc.dt)\\n            timeFactor = stepDesc.dt / (1000 / 60);\\n\\n        const posDelta = this.bendingPositionDelta.clone().multiplyScalar(timeFactor);\\n        const velDelta = this.bendingVelocityDelta.clone().multiplyScalar(timeFactor);\\n        this.position.add(posDelta);\\n        this.velocity.add(velDelta);\\n        this.angle += (this.bendingAngleDelta * timeFactor);\\n\\n        this.bendingIncrements--;\\n    }\\n\\n    getAABB() {\\n        // todo take rotation into account\\n        // registration point is in the middle\\n        return {\\n            min: [this.x - this.width / 2, this.y - this.height / 2],\\n            max: [this.x + this.width / 2, this.y + this.height / 2]\\n        };\\n    }\\n\\n    /**\\n    * Determine if this object will collide with another object.\\n    * Only applicable on \\\"bruteForce\\\" physics engine.\\n    * @param {DynamicObject} other DynamicObject\\n    * @return {Boolean} true if the two objects collide\\n    */\\n    collidesWith(other) {\\n        return true;\\n    }\\n\\n}\\n\\nexport default DynamicObject;\\n\",\"// import {DynamicObject} from 'lance/client-module/lance-gg';\\nimport DynamicObject from 'lance/serialize/DynamicObject';\\n// var DynamicObject = require('lance/server/lance-gg').DynamicObject;\\n\\nexport default class ObservableObject extends DynamicObject {\\n\\tconstructor (gameEngine, options, props) {\\n\\t\\tsuper(gameEngine, options, props);\\n\\n\\t\\tconsole.log('observable object has been created');\\n\\t}\\n}\\n\",\"import ConfiguratorLogicEngine from 'js/common/ConfiguratorLogicEngine';\\nimport ServiceUserEngine from 'js/client/ServiceUser';\\nimport ServiceRenderer from 'js/client/ServiceRenderer';\\n\\nvar serviceLogic = new ConfiguratorLogicEngine(\\n\\t{\\n\\t\\ttraceLevel: 6\\n\\t}\\n);\\n\\n// var serviceEngine = new ServiceUserEngine(\\n// \\tserviceLogic,\\n// \\t{\\n// \\t\\tverbose: true,\\n// \\t\\tscheduler: 'render-schedule',\\n// \\t\\tsync: 'extrapolate',\\n// \\t\\tautoConnect: true\\n// \\t},\\n// \\tServiceRenderer\\n// );\\n\\n// const renderer = new ServiceRenderer(serviceLogic, serviceEngine);\\n\\nconsole.log('hi');\\n\\n// serviceEngine.start();\\n\",\"import ObservableObject from './ObservableObject.js';\\nimport GameEngine from 'lance/GameEngine';\\n// var GameEngine = require('lance/server/lance-gg').GameEngine;\\n\\nexport default class ServiceLogic extends GameEngine {\\n\\tconstructor (opt) {\\n\\t\\tsuper(opt);\\n\\n    // common\\n\\t\\tthis.on('postStep', this.configurationLogic.bind(this));\\n\\n    // server init\\n\\t\\tthis.on('server__init', this.serverInit.bind(this));\\n\\t}\\n\\n\\tconfigurationLogic () {\\n\\t\\tconsole.log('it\\\\' empty now but one day it will manage alle configurator logic');\\n\\t}\\n\\n\\tserverInit () {\\n\\t\\tconsole.log('server was initialized');\\n\\t}\\n\\n\\tregisterClasses (serializer) {\\n\\t\\tserializer.registerClass(ObservableObject);\\n\\t}\\n}\\n\"]}","code":"!function(t){var e={};function i(n){if(e[n])return e[n].exports;var s=e[n]={i:n,l:!1,exports:{}};return t[n].call(s.exports,s,s.exports,i),s.l=!0,s.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var s in t)i.d(n,s,function(e){return t[e]}.bind(null,s));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,\"a\",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p=\"\",i(i.s=26)}([function(t,e,i){\"use strict\";i.r(e);class n{}n.TYPES={FLOAT32:\"FLOAT32\",INT32:\"INT32\",INT16:\"INT16\",INT8:\"INT8\",UINT8:\"UINT8\",STRING:\"STRING\",CLASSINSTANCE:\"CLASSINSTANCE\",LIST:\"LIST\"},e.default=n},function(t,e,i){\"use strict\";i.r(e);var n=i(2),s=i(0);class r extends n.default{static get netScheme(){return{x:{type:s.default.TYPES.FLOAT32},y:{type:s.default.TYPES.FLOAT32}}}constructor(t,e){return super(),this.x=t,this.y=e,this}toString(){function t(t){return Math.round(1e3*t)/1e3}return`[${t(this.x)}, ${t(this.y)}]`}set(t,e){return this.x=t,this.y=e,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}add(t){return this.x+=t.x,this.y+=t.y,this}subtract(t){return this.x-=t.x,this.y-=t.y,this}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}normalize(){return this.multiplyScalar(1/this.length()),this}copy(t){return this.x=t.x,this.y=t.y,this}clone(){return new r(this.x,this.y)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}getBendingDelta(t,e){let i=t.clone();return i.subtract(this),i.multiplyScalar(e.percent),\"number\"==typeof e.max&&i.length()>e.max||\"number\"==typeof e.min&&i.length()<e.min?new r(0,0):(i.multiplyScalar(1/e.increments),i)}}e.default=r},function(t,e,i){\"use strict\";i.r(e);var n=i(9),s=i(0);e.default=class{serialize(t,e){let i,r,o,c=0,a=(e=Object.assign({bufferOffset:0},e)).bufferOffset,l=0;if(c=this.classId?this.classId:n.default.hashStr(this.constructor.name),this.netScheme?i=this.netScheme:this.constructor.netScheme?i=this.constructor.netScheme:console.warn(\"no netScheme defined! This will result in awful performance\"),null==e.dataBuffer&&1!=e.dry){let e=this.serialize(t,{dry:!0}).bufferOffset;r=new ArrayBuffer(e)}else r=e.dataBuffer;if(1!=e.dry&&(o=new DataView(r)).setUint8(a+l,c),l+=Uint8Array.BYTES_PER_ELEMENT,i)for(let n of Object.keys(i).sort())if(1!=e.dry&&t.writeDataView(o,this[n],a+l,i[n]),i[n].type===s.default.TYPES.STRING)l+=Uint16Array.BYTES_PER_ELEMENT,null!==this[n]&&void 0!==this[n]&&(l+=this[n].length*Uint16Array.BYTES_PER_ELEMENT);else if(i[n].type===s.default.TYPES.CLASSINSTANCE)l+=this[n].serialize(t,{dry:!0}).bufferOffset;else if(i[n].type===s.default.TYPES.LIST){l+=Uint16Array.BYTES_PER_ELEMENT;for(let e of this[n])i[n].itemType===s.default.TYPES.CLASSINSTANCE?l+=e.serialize(t,{dry:!0}).bufferOffset:i[n].itemType===s.default.TYPES.STRING?l+=Uint16Array.BYTES_PER_ELEMENT*(1+e.length):l+=t.getTypeByteSize(i[n].itemType)}else l+=t.getTypeByteSize(i[n].type);return{dataBuffer:r,bufferOffset:l}}prunedStringsClone(t,e){if(!e)return this;e=t.deserialize(e).obj;let i=this.constructor.netScheme,n=Object.keys(i).filter(t=>i[t].type===s.default.TYPES.STRING).filter(t=>e[t]!==this[t]);if(0==n.length)return this;let r=new this.constructor(null,{id:null});for(let t of Object.keys(i))r[t]=n.indexOf(t)<0?this[t]:null;return r}syncTo(t){let e=this.constructor.netScheme;for(let i of Object.keys(e))e[i].type!==s.default.TYPES.LIST&&e[i].type!==s.default.TYPES.CLASSINSTANCE&&(e[i].type!==s.default.TYPES.STRING?this[i]=t[i]:\"string\"==typeof t[i]&&(this[i]=t[i]))}}},function(t,e,i){\"use strict\";var n=i(18)();t.exports=function(t){return t!==n&&null!==t}},function(t,e,i){\"use strict\";i.r(e);e.default=class{constructor(){this.stepCount=0,this.objects={},this.playerCount=0,this.idCount=0}getNewId(){let t=this.idCount;for(;t in this.objects;)t++;return this.idCount=t+1,t}queryObjects(t){let e=[];return this.forEachObject((i,n)=>{let s=[];if(s.push(!(\"id\"in t)||null!==t.id&&n.id===t.id),s.push(!(\"playerId\"in t)||null!==t.playerId&&n.playerId===t.playerId),s.push(!(\"instanceType\"in t)||null!==t.instanceType&&n instanceof t.instanceType),\"components\"in t&&t.components.forEach(t=>{s.push(n.hasComponent(t))}),s.every(t=>t)&&(e.push(n),t.returnSingle))return!1}),t.returnSingle?e.length>0?e[0]:null:e}queryObject(t){return this.queryObjects(Object.assign(t,{returnSingle:!0}))}addObject(t){this.objects[t.id]=t}removeObject(t){delete this.objects[t]}forEachObject(t){for(let e of Object.keys(this.objects))if(!1===t(e,this.objects[e]))break}}},function(t,e,i){\"use strict\";i.r(e);class n{constructor(t){this.options=Object.assign({traceLevel:this.TRACE_DEBUG},t),this.traceBuffer=[],this.step=\"initializing\",this.error=this.trace.bind(this,n.TRACE_ERROR),this.warn=this.trace.bind(this,n.TRACE_WARN),this.info=this.trace.bind(this,n.TRACE_INFO),this.debug=this.trace.bind(this,n.TRACE_DEBUG),this.trace=this.trace.bind(this,n.TRACE_ALL)}static get TRACE_ALL(){return 0}static get TRACE_DEBUG(){return 1}static get TRACE_INFO(){return 2}static get TRACE_WARN(){return 3}static get TRACE_ERROR(){return 4}static get TRACE_NONE(){return 1e3}trace(t,e){if(\"function\"!=typeof e)throw new Error(`Lance trace was called but instead of passing a function, it received a [${typeof e}]`);t<this.options.traceLevel||this.traceBuffer.push({data:e(),level:t,step:this.step,time:new Date})}rotate(){let t=this.traceBuffer;return this.traceBuffer=[],t}get length(){return this.traceBuffer.length}setStep(t){this.step=t}}e.default=n},function(t,e,i){\"use strict\";i.r(e),function(t){var n=i(4),s=i(7),r=i.n(s),o=i(8),c=i(5);e.default=class{constructor(e){const i=\"undefined\"==typeof window;(i?t:window).LANCE={gameEngine:this};const s={GameWorld:n.default,traceLevel:c.default.TRACE_NONE};i||(s.clientIDSpace=1e6),this.options=Object.assign(s,e),this.playerId=NaN;let o=new r.a;this.on=o.on,this.once=o.once,this.removeListener=o.off,this.off=o.off,this.emit=o.emit,this.trace=new c.default({traceLevel:this.options.traceLevel})}findLocalShadow(t){for(let e of Object.keys(this.world.objects)){if(Number(e)<this.options.clientIDSpace)continue;let i=this.world.objects[e];if(i.hasOwnProperty(\"inputId\")&&i.inputId===t.inputId)return i}return null}initWorld(t){this.world=new n.default,this.options.clientIDSpace&&(this.world.idCount=this.options.clientIDSpace),this.worldSettings=Object.assign({},t)}start(){this.trace.info(()=>\"========== game engine started ==========\"),this.initWorld(),this.timer=new o.default,this.timer.play(),this.on(\"postStep\",(t,e)=>{e||this.timer.tick()}),this.emit(\"start\",{timestamp:(new Date).getTime()})}step(t,e,i,n){if(n)return i&&(i/=1e3),void this.physicsEngine.step(i,o);if(void 0===t)throw new Error(\"game engine does not forward argument isReenact to super class\");t=Boolean(t);let s=++this.world.stepCount,r=this.options.clientIDSpace;function o(e){return!t||e.id<r}this.emit(\"preStep\",{step:s,isReenact:t,dt:i}),this.physicsEngine&&!this.ignorePhysics&&(i&&(i/=1e3),this.physicsEngine.step(i,o)),this.world.forEachObject((e,i)=>{\"function\"==typeof i.refreshFromPhysics&&i.refreshFromPhysics(),this.trace.trace(()=>`object[${e}] after ${t?\"reenact\":\"step\"} : ${i.toString()}`)}),this.emit(\"postStep\",{step:s,isReenact:t})}addObjectToWorld(t){if(Number(t.id)>=this.options.clientIDSpace){let e=!1;if(this.world.forEachObject((i,n)=>{if(n.hasOwnProperty(\"inputId\")&&n.inputId===t.inputId)return e=!0,!1}),e)return this.trace.info(()=>`========== shadow object NOT added ${t.toString()} ==========`),null}return this.world.addObject(t),\"function\"==typeof t.onAddToWorld&&t.onAddToWorld(this),this.emit(\"objectAdded\",t),this.trace.info(()=>`========== object added ${t.toString()} ==========`),t}processInput(t,e,i){this.trace.info(()=>`game engine processing input[${t.messageIndex}] <${t.input}> from playerId ${e}`)}removeObjectFromWorld(t){\"object\"==typeof t&&(t=t.id);let e=this.world.objects[t];if(!e)throw new Error(`Game attempted to remove a game object which doesn't (or never did) exist, id=${t}`);this.trace.info(()=>`========== destroying object ${e.toString()} ==========`),\"function\"==typeof e.onRemoveFromWorld&&e.onRemoveFromWorld(this),this.emit(\"objectDestroyed\",e),this.world.removeObject(t)}isOwnedByPlayer(t){return t.playerId==this.playerId}registerClasses(t){}getPlayerGameOverResult(){return null}}}.call(this,i(10))},function(t,e,i){\"use strict\";var n,s,r,o,c,a,l,h=i(11),u=i(25),d=Function.prototype.apply,f=Function.prototype.call,p=Object.create,y=Object.defineProperty,g=Object.defineProperties,b=Object.prototype.hasOwnProperty,m={configurable:!0,enumerable:!1,writable:!0};s=function(t,e){var i,s;return u(e),s=this,n.call(this,t,i=function(){r.call(s,t,i),d.call(e,this,arguments)}),i.__eeOnceListener__=e,this},c={on:n=function(t,e){var i;return u(e),b.call(this,\"__ee__\")?i=this.__ee__:(i=m.value=p(null),y(this,\"__ee__\",m),m.value=null),i[t]?\"object\"==typeof i[t]?i[t].push(e):i[t]=[i[t],e]:i[t]=e,this},once:s,off:r=function(t,e){var i,n,s,r;if(u(e),!b.call(this,\"__ee__\"))return this;if(!(i=this.__ee__)[t])return this;if(\"object\"==typeof(n=i[t]))for(r=0;s=n[r];++r)s!==e&&s.__eeOnceListener__!==e||(2===n.length?i[t]=n[r?0:1]:n.splice(r,1));else n!==e&&n.__eeOnceListener__!==e||delete i[t];return this},emit:o=function(t){var e,i,n,s,r;if(b.call(this,\"__ee__\")&&(s=this.__ee__[t]))if(\"object\"==typeof s){for(i=arguments.length,r=new Array(i-1),e=1;e<i;++e)r[e-1]=arguments[e];for(s=s.slice(),e=0;n=s[e];++e)d.call(n,this,r)}else switch(arguments.length){case 1:f.call(s,this);break;case 2:f.call(s,this,arguments[1]);break;case 3:f.call(s,this,arguments[1],arguments[2]);break;default:for(i=arguments.length,r=new Array(i-1),e=1;e<i;++e)r[e-1]=arguments[e];d.call(s,this,r)}}},a={on:h(n),once:h(s),off:h(r),emit:h(o)},l=g({},a),t.exports=e=function(t){return null==t?p(l):g(Object(t),a)},e.methods=c},function(t,e,i){\"use strict\";i.r(e),i.d(e,\"default\",function(){return n});class n{constructor(){this.currentTime=0,this.isActive=!1,this.idCounter=0,this.events={}}play(){this.isActive=!0}tick(){let t,e;if(this.isActive)for(e in this.currentTime++,this.events)(t=this.events[e])&&(\"repeat\"==t.type&&(this.currentTime-t.startOffset)%t.time==0&&t.callback.apply(t.thisContext,t.args),\"single\"==t.type&&(this.currentTime-t.startOffset)%t.time==0&&(t.callback.apply(t.thisContext,t.args),t.destroy()))}destroyEvent(t){delete this.events[t]}loop(t,e){let i=new s(this,s.TYPES.repeat,t,e);return this.events[i.id]=i,i}add(t,e,i,n){let r=new s(this,s.TYPES.single,t,e,i,n);return this.events[r.id]=r,r}destroy(t){delete this.events[t]}}class s{constructor(t,e,i,n,s,r){this.id=++t.idCounter,this.timer=t,this.type=e,this.time=i,this.callback=n,this.startOffset=t.currentTime,this.thisContext=s,this.args=r,this.destroy=function(){this.timer.destroy(this.id)}}}s.TYPES={repeat:\"repeat\",single:\"single\"}},function(t,e,i){\"use strict\";i.r(e),i.d(e,\"default\",function(){return n});class n{static hashStr(t,e){let i=5381,n=t.length;for(e=e||8;n;)i=33*i^t.charCodeAt(--n);return i>>>=0,i%=Math.pow(2,e)-1}static arrayBuffersEqual(t,e){if(t.byteLength!==e.byteLength)return!1;let i=new Int8Array(t),n=new Int8Array(e);for(let e=0;e!==t.byteLength;e++)if(i[e]!==n[e])return!1;return!0}static httpGetPromise(t){return new Promise((e,i)=>{let n=new XMLHttpRequest;n.open(\"GET\",t,!0),n.onload=(()=>{n.status>=200&&n.status<400?e(JSON.parse(n.responseText)):i()}),n.onerror=(()=>{}),n.send()})}}},function(t,e){var i;i=function(){return this}();try{i=i||new Function(\"return this\")()}catch(t){\"object\"==typeof window&&(i=window)}t.exports=i},function(t,e,i){\"use strict\";var n=i(12),s=i(20),r=i(21),o=i(22);(t.exports=function(t,e){var i,r,c,a,l;return arguments.length<2||\"string\"!=typeof t?(a=e,e=t,t=null):a=arguments[2],null==t?(i=c=!0,r=!1):(i=o.call(t,\"c\"),r=o.call(t,\"e\"),c=o.call(t,\"w\")),l={value:e,configurable:i,enumerable:r,writable:c},a?n(s(a),l):l}).gs=function(t,e,i){var c,a,l,h;return\"string\"!=typeof t?(l=i,i=e,e=t,t=null):l=arguments[3],null==e?e=void 0:r(e)?null==i?i=void 0:r(i)||(l=i,i=void 0):(l=e,e=i=void 0),null==t?(c=!0,a=!1):(c=o.call(t,\"c\"),a=o.call(t,\"e\")),h={get:e,set:i,configurable:c,enumerable:a},l?n(s(l),h):h}},function(t,e,i){\"use strict\";t.exports=i(13)()?Object.assign:i(14)},function(t,e,i){\"use strict\";t.exports=function(){var t,e=Object.assign;return\"function\"==typeof e&&(e(t={foo:\"raz\"},{bar:\"dwa\"},{trzy:\"trzy\"}),t.foo+t.bar+t.trzy===\"razdwatrzy\")}},function(t,e,i){\"use strict\";var n=i(15),s=i(19),r=Math.max;t.exports=function(t,e){var i,o,c,a=r(arguments.length,2);for(t=Object(s(t)),c=function(n){try{t[n]=e[n]}catch(t){i||(i=t)}},o=1;o<a;++o)e=arguments[o],n(e).forEach(c);if(void 0!==i)throw i;return t}},function(t,e,i){\"use strict\";t.exports=i(16)()?Object.keys:i(17)},function(t,e,i){\"use strict\";t.exports=function(){try{return Object.keys(\"primitive\"),!0}catch(t){return!1}}},function(t,e,i){\"use strict\";var n=i(3),s=Object.keys;t.exports=function(t){return s(n(t)?Object(t):t)}},function(t,e,i){\"use strict\";t.exports=function(){}},function(t,e,i){\"use strict\";var n=i(3);t.exports=function(t){if(!n(t))throw new TypeError(\"Cannot use null or undefined\");return t}},function(t,e,i){\"use strict\";var n=i(3),s=Array.prototype.forEach,r=Object.create;t.exports=function(t){var e=r(null);return s.call(arguments,function(t){n(t)&&function(t,e){var i;for(i in t)e[i]=t[i]}(Object(t),e)}),e}},function(t,e,i){\"use strict\";t.exports=function(t){return\"function\"==typeof t}},function(t,e,i){\"use strict\";t.exports=i(23)()?String.prototype.contains:i(24)},function(t,e,i){\"use strict\";var n=\"razdwatrzy\";t.exports=function(){return\"function\"==typeof n.contains&&(!0===n.contains(\"dwa\")&&!1===n.contains(\"foo\"))}},function(t,e,i){\"use strict\";var n=String.prototype.indexOf;t.exports=function(t){return n.call(this,t,arguments[1])>-1}},function(t,e,i){\"use strict\";t.exports=function(t){if(\"function\"!=typeof t)throw new TypeError(t+\" is not a function\");return t}},function(t,e,i){\"use strict\";i.r(e);var n=i(1),s=i(2),r=i(0);var o=class extends s.default{static get netScheme(){return{id:{type:r.default.TYPES.INT32}}}constructor(t,e){super(),this.gameEngine=t,this.id=null,e&&\"id\"in e?this.id=e.id:this.gameEngine&&(this.id=this.gameEngine.world.getNewId()),this.components={}}onAddToWorld(t){}onRemoveFromWorld(t){}toString(){return`game-object[${this.id}]`}bendingToString(){return\"no bending\"}saveState(t){this.savedCopy=new this.constructor(this.gameEngine,{id:null}),this.savedCopy.syncTo(t||this)}get bending(){return{position:{percent:1,min:0},velocity:{percent:0,min:0},angularVelocity:{percent:0},angleLocal:{percent:1}}}bendToCurrentState(t,e,i,n){this.savedCopy&&this.bendToCurrent(this.savedCopy,t,e,i,n),this.savedCopy=null}bendToCurrent(t,e,i,n,s){}syncTo(t){super.syncTo(t)}refreshToPhysics(){}refreshFromPhysics(){}applyIncrementalBending(){}destroy(){}addComponent(t){t.parentObject=this,this.components[t.constructor.name]=t,this.gameEngine&&this.gameEngine.emit(\"componentAdded\",this,t)}removeComponent(t){delete this.components[t],this.gameEngine&&this.gameEngine.emit(\"componentRemoved\",this,t)}hasComponent(t){return t.name in this.components}getComponent(t){return this.components[t.name]}};class c{static interpolate(t,e,i){return(e-t)*i+t}static interpolateDelta(t,e,i){return(e-t)*i}static interpolateDeltaWithWrapping(t,e,i,n,s){let r=s-n;return t-e>r/2?e+=r:e-t>r/2&&(t+=r),Math.abs(t-e)>r/3&&console.log(\"wrap interpolation is close to limit.  Not sure which edge to wrap to.\"),(e-t)*i}static interpolateWithWrapping(t,e,i,n,s){let r=t+this.interpolateDeltaWithWrapping(t,e,i,n,s),o=s-n;return r>=o&&(r-=o),r<0&&(r+=o),r}}var a=class extends o{static get netScheme(){return Object.assign({playerId:{type:r.default.TYPES.INT16},position:{type:r.default.TYPES.CLASSINSTANCE},width:{type:r.default.TYPES.INT16},height:{type:r.default.TYPES.INT16},isStatic:{type:r.default.TYPES.UINT8},velocity:{type:r.default.TYPES.CLASSINSTANCE},angle:{type:r.default.TYPES.FLOAT32}},super.netScheme)}constructor(t,e,i){super(t,e),this.playerId=i&&i.playerId?i.playerId:0,this.bendingIncrements=0,this.position=new n.default(0,0),this.velocity=new n.default(0,0),this.width=i&&i.width?i.width:1,this.height=i&&i.height?i.height:1,this.isStatic=i&&i.isStatic?i.isStatic:0,this.friction=new n.default(1,1),i&&i.playerId&&(this.playerId=i.playerId),i&&i.position&&this.position.copy(i.position),i&&i.velocity&&this.velocity.copy(i.velocity),this.angle=90,this.isRotatingLeft=!1,this.isRotatingRight=!1,this.isAccelerating=!1,this.rotationSpeed=2.5,this.acceleration=.1,this.deceleration=.99}get x(){return this.position.x}get y(){return this.position.y}toString(){return`${this.constructor.name}[${this.id}] player${this.playerId} Pos=${this.position} Vel=${this.velocity} angle${t=this.angle,Math.round(1e3*t)/1e3}`;var t}get bending(){return{}}turnRight(t){return this.angle+=t,this.angle>=360&&(this.angle-=360),this.angle<0&&(this.angle+=360),this}turnLeft(t){return this.turnRight(-t)}accelerate(t){let e=this.angle*(Math.PI/180),i=new n.default(Math.cos(e),Math.sin(e));return i.multiplyScalar(t),this.velocity.add(i),this}bendingToString(){return this.bendingIncrements?`ΔPos=${this.bendingPositionDelta} ΔVel=${this.bendingVelocityDelta} ΔAngle=${this.bendingAngleDelta} increments=${this.bendingIncrements}`:\"no bending\"}get maxSpeed(){return null}syncTo(t){super.syncTo(t),this.position.copy(t.position),this.velocity.copy(t.velocity),this.width=t.width,this.height=t.height,this.bendingAngle=t.bendingAngle,this.rotationSpeed=t.rotationSpeed,this.acceleration=t.acceleration,this.deceleration=t.deceleration}bendToCurrent(t,e,i,n,s){let r={increments:s,percent:e},o=Object.assign({},r,this.bending.position),a=Object.assign({},r,this.bending.velocity),l=Object.assign({},r,this.bending.angle);n&&(Object.assign(o,this.bending.positionLocal),Object.assign(a,this.bending.velocityLocal),Object.assign(l,this.bending.angleLocal)),this.incrementScale=e/s,this.bendingPositionDelta=t.position.getBendingDelta(this.position,o),this.bendingVelocityDelta=t.velocity.getBendingDelta(this.velocity,a),this.bendingAngleDelta=c.interpolateDeltaWithWrapping(t.angle,this.angle,l.percent,0,360)/s,this.bendingTarget=new this.constructor,this.bendingTarget.syncTo(this),this.position.copy(t.position),this.velocity.copy(t.velocity),this.angle=t.angle,this.bendingIncrements=s,this.bendingOptions=r}applyIncrementalBending(t){if(0===this.bendingIncrements)return;let e=1;t&&t.dt&&(e=t.dt/(1e3/60));const i=this.bendingPositionDelta.clone().multiplyScalar(e),n=this.bendingVelocityDelta.clone().multiplyScalar(e);this.position.add(i),this.velocity.add(n),this.angle+=this.bendingAngleDelta*e,this.bendingIncrements--}getAABB(){return{min:[this.x-this.width/2,this.y-this.height/2],max:[this.x+this.width/2,this.y+this.height/2]}}collidesWith(t){return!0}};class l extends a{constructor(t,e,i){super(t,e,i),console.log(\"observable object has been created\")}}var h=i(6);new class extends h.default{constructor(t){super(t),this.on(\"postStep\",this.configurationLogic.bind(this)),this.on(\"server__init\",this.serverInit.bind(this))}configurationLogic(){console.log(\"it' empty now but one day it will manage alle configurator logic\")}serverInit(){console.log(\"server was initialized\")}registerClasses(t){t.registerClass(l)}}({traceLevel:6});console.log(\"hi\")}]);","extractedComments":[]}